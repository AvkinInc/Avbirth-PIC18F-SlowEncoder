

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Nov 12 12:01:15 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F23K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    37  0000                     
    38                           ; Version 2.20
    39                           ; Generated 05/05/2020 GMT
    40                           ; 
    41                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F23K22 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73 ;; Function _EUSART2_DefaultFramingErrorHandler is unused but had its address taken
    74  0000                     
    75 ;; Function _EUSART2_DefaultOverrunErrorHandler is unused but had its address taken
    76  0000                     
    77 ;; Function _EUSART2_DefaultErrorHandler is unused but had its address taken
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0007DE                     __pidataCOMRAM:
    81                           	callstack 0
    82                           
    83                           ;initializer for _control_bits
    84  0007DE  0C10               	dw	3088
    85                           
    86                           	psect	smallconst
    87  000200                     __psmallconst:
    88                           	callstack 0
    89  000200  00                 	db	0
    90  000201                     _spi1_configuration:
    91                           	callstack 0
    92  000201  01                 	db	1
    93  000202  40                 	db	64
    94  000203  01                 	db	1
    95  000204  00                 	db	0
    96  000205                     __end_of_spi1_configuration:
    97                           	callstack 0
    98  000205                     STR_1:
    99  000205  73                 	db	115	;'s'
   100  000206  74                 	db	116	;'t'
   101  000207  65                 	db	101	;'e'
   102  000208  70                 	db	112	;'p'
   103  000209  0A                 	db	10
   104  00020A  00                 	db	0
   105  00020B                     STR_3:
   106  00020B  4E                 	db	78	;'N'
   107  00020C  6F                 	db	111	;'o'
   108  00020D  20                 	db	32
   109  00020E  72                 	db	114	;'r'
   110  00020F  00                 	db	0
   111  000210                     STR_5:
   112  000210  72                 	db	114	;'r'
   113  000211  3A                 	db	58	;':'
   114  000212  00                 	db	0
   115  000213                     STR_2:
   116  000213  77                 	db	119	;'w'
   117  000214  3A                 	db	58	;':'
   118  000215  00                 	db	0
   119  000216  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	nvCOMRAM
   122  00001A                     __pnvCOMRAM:
   123                           	callstack 0
   124  00001A                     _uart_write:
   125                           	callstack 0
   126  00001A                     	ds	2
   127  00001C                     _EUSART2_ErrorHandler:
   128                           	callstack 0
   129  00001C                     	ds	2
   130  00001E                     _EUSART2_OverrunErrorHandler:
   131                           	callstack 0
   132  00001E                     	ds	2
   133  000020                     _EUSART2_FramingErrorHandler:
   134                           	callstack 0
   135  000020                     	ds	2
   136  0000                     _ANSELA	set	3896
   137  0000                     _ANSELB	set	3897
   138  0000                     _ANSELC	set	3898
   139  0000                     _LATCbits	set	3979
   140  0000                     _OSCTUNE	set	3995
   141  0000                     _OSCCON2	set	4050
   142  0000                     _OSCCON	set	4051
   143  0000                     _PIR1bits	set	3998
   144  0000                     _SSP1BUF	set	4041
   145  0000                     _SSP1CON2	set	4037
   146  0000                     _TRISCbits	set	3988
   147  0000                     _SSP1ADD	set	4040
   148  0000                     _SSP1CON1	set	4038
   149  0000                     _SSP1STAT	set	4039
   150  0000                     _TXREG2	set	3955
   151  0000                     _RCREG2	set	3956
   152  0000                     _RCSTA2bits	set	3953
   153  0000                     _TXSTA2bits	set	3954
   154  0000                     _PIR3bits	set	4004
   155  0000                     _SPBRGH2	set	3958
   156  0000                     _SPBRG2	set	3957
   157  0000                     _TXSTA2	set	3954
   158  0000                     _RCSTA2	set	3953
   159  0000                     _BAUDCON2	set	3952
   160  0000                     _LATBbits	set	3978
   161  0000                     _SSP1CON1bits	set	4038
   162  0000                     _INTCONbits	set	4082
   163  0000                     _INTCON2bits	set	4081
   164  0000                     _WPUB	set	3937
   165  0000                     _TRISC	set	3988
   166  0000                     _TRISB	set	3987
   167  0000                     _TRISA	set	3986
   168  0000                     _LATC	set	3979
   169  0000                     _LATB	set	3978
   170  0000                     _LATA	set	3977
   171                           
   172                           ; #config settings
   173                           
   174                           	psect	cinit
   175  000704                     __pcinit:
   176                           	callstack 0
   177  000704                     start_initialization:
   178                           	callstack 0
   179  000704                     __initialization:
   180                           	callstack 0
   181                           
   182                           ; Initialize objects allocated to COMRAM (2 bytes)
   183                           ; load TBLPTR registers with __pidataCOMRAM
   184  000704  0EDE               	movlw	low __pidataCOMRAM
   185  000706  6EF6               	movwf	tblptrl,c
   186  000708  0E07               	movlw	high __pidataCOMRAM
   187  00070A  6EF7               	movwf	tblptrh,c
   188  00070C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   189  00070E  6EF8               	movwf	tblptru,c
   190  000710  0009               	tblrd		*+	;fetch initializer
   191  000712  CFF5 F025          	movff	tablat,__pdataCOMRAM
   192  000716  0009               	tblrd		*+	;fetch initializer
   193  000718  CFF5 F026          	movff	tablat,__pdataCOMRAM+1
   194                           
   195                           ; Clear objects allocated to COMRAM (3 bytes)
   196  00071C  6A24               	clrf	(__pbssCOMRAM+2)& (0+255),c
   197  00071E  6A23               	clrf	(__pbssCOMRAM+1)& (0+255),c
   198  000720  6A22               	clrf	__pbssCOMRAM& (0+255),c
   199  000722                     end_of_initialization:
   200                           	callstack 0
   201  000722                     __end_of__initialization:
   202                           	callstack 0
   203  000722  0E00               	movlw	low (__Lmediumconst shr (0+16))
   204  000724  6EF8               	movwf	tblptru,c
   205  000726  0100               	movlb	0
   206  000728  EF0C  F001         	goto	_main	;jump to C main() function
   207                           
   208                           	psect	bssCOMRAM
   209  000022                     __pbssCOMRAM:
   210                           	callstack 0
   211  000022                     _control_bits_read_low:
   212                           	callstack 0
   213  000022                     	ds	1
   214  000023                     _control_bits_read_high:
   215                           	callstack 0
   216  000023                     	ds	1
   217  000024                     _eusart2RxLastError:
   218                           	callstack 0
   219  000024                     	ds	1
   220                           
   221                           	psect	dataCOMRAM
   222  000025                     __pdataCOMRAM:
   223                           	callstack 0
   224  000025                     _control_bits:
   225                           	callstack 0
   226  000025                     	ds	2
   227                           
   228                           	psect	cstackCOMRAM
   229  000001                     __pcstackCOMRAM:
   230                           	callstack 0
   231  000001                     EUSART2_Write@txData:
   232                           	callstack 0
   233  000001                     SPI1_ExchangeByte@data:
   234                           	callstack 0
   235  000001                     SPI1_WriteByte@byte:
   236                           	callstack 0
   237  000001                     EUSART2_SetFramingErrorHandler@interruptHandler:
   238                           	callstack 0
   239  000001                     EUSART2_SetOverrunErrorHandler@interruptHandler:
   240                           	callstack 0
   241  000001                     EUSART2_SetErrorHandler@interruptHandler:
   242                           	callstack 0
   243  000001                     setUartFunction@uart_write_local_function:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0x0
   247  000001                     	ds	1
   248  000002                     ??_write1byteHex:
   249  000002                     writeByte@in:
   250                           	callstack 0
   251  000002                     writeString@message:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x1
   255  000002                     	ds	1
   256  000003                     write1byteHex@in:
   257                           	callstack 0
   258                           
   259                           ; 1 bytes @ 0x2
   260  000003                     	ds	1
   261  000004                     writeString@charIn:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x3
   265  000004                     	ds	2
   266  000006                     DRV8711_SPI_read@addr:
   267                           	callstack 0
   268  000006                     DRV8711_SPI_CMD@cmd:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x5
   272  000006                     	ds	1
   273  000007                     DRV8711_SPI_read@addr4:
   274                           	callstack 0
   275                           
   276                           ; 1 bytes @ 0x6
   277  000007                     	ds	1
   278  000008                     ??_DRV8711_SPI_CMD:
   279                           
   280                           ; 1 bytes @ 0x7
   281  000008                     	ds	2
   282  00000A                     DRV8711_SPI_CMD@addr:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x9
   286  00000A                     	ds	1
   287  00000B                     DRV8711_SPI_CMD@addr4:
   288                           	callstack 0
   289                           
   290                           ; 1 bytes @ 0xA
   291  00000B                     	ds	1
   292  00000C                     DRV8711_SPI_CMD@cmd12:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0xB
   296  00000C                     	ds	2
   297  00000E                     ??_setStepSize:
   298  00000E                     stepperSleep@in:
   299                           	callstack 0
   300                           
   301                           ; 1 bytes @ 0xD
   302  00000E                     	ds	6
   303  000014                     setStepSize@size:
   304                           	callstack 0
   305                           
   306                           ; 1 bytes @ 0x13
   307  000014                     	ds	1
   308  000015                     setStepSize@step_size_bits:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x14
   312  000015                     	ds	1
   313  000016                     ??_main:
   314                           
   315                           ; 1 bytes @ 0x15
   316  000016                     	ds	2
   317  000018                     main@i:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x17
   321  000018                     	ds	2
   322                           
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 48 in file "main.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  i               2   23[COMRAM] int 
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0   BANK1
   342 ;;      Params:         0       0       0
   343 ;;      Locals:         2       0       0
   344 ;;      Temps:          2       0       0
   345 ;;      Totals:         4       0       0
   346 ;;Total ram usage:        4 bytes
   347 ;; Hardware stack levels required when called:    4
   348 ;; This function calls:
   349 ;;		_DRV8711_SPI_read
   350 ;;		_SYSTEM_Initialize
   351 ;;		_setStepSize
   352 ;;		_setUartFunction
   353 ;;		_stepperSleep
   354 ;;		_writeString
   355 ;; This function is called by:
   356 ;;		Startup code after reset
   357 ;; This function uses a non-reentrant model
   358 ;;
   359                           
   360                           	psect	text0
   361  000218                     __ptext0:
   362                           	callstack 0
   363  000218                     _main:
   364                           	callstack 27
   365  000218                     
   366                           ;main.c: 51:     SYSTEM_Initialize();
   367  000218  ECBE  F003         	call	_SYSTEM_Initialize
   368                           
   369                           ;main.c: 70:     setUartFunction(EUSART2_Write);
   370  00021C  0E66               	movlw	low _EUSART2_Write
   371  00021E  6E01               	movwf	setUartFunction@uart_write_local_function^0,c
   372  000220  0E07               	movlw	high _EUSART2_Write
   373  000222  6E02               	movwf	(setUartFunction@uart_write_local_function+1)^0,c
   374  000224  ECD7  F003         	call	_setUartFunction	;wreg free
   375  000228                     
   376                           ;main.c: 72:     SSP1CON1bits.SSPEN = 1;
   377  000228  8AC6               	bsf	198,5,c	;volatile
   378  00022A                     l1769:
   379                           
   380                           ;main.c: 75:     {;main.c: 76:         setStepSize(Quarter);
   381  00022A  0E04               	movlw	4
   382  00022C  EC18  F002         	call	_setStepSize
   383  000230                     
   384                           ;main.c: 77:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   385  000230  0E0B               	movlw	11
   386  000232  6E17               	movwf	(??_main+1)^0,c
   387  000234  0E26               	movlw	38
   388  000236  6E16               	movwf	??_main^0,c
   389  000238  0E5E               	movlw	94
   390  00023A                     u947:
   391  00023A  2EE8               	decfsz	wreg,f,c
   392  00023C  D7FE               	bra	u947
   393  00023E  2E16               	decfsz	??_main^0,f,c
   394  000240  D7FC               	bra	u947
   395  000242  2E17               	decfsz	(??_main+1)^0,f,c
   396  000244  D7FA               	bra	u947
   397  000246                     
   398                           ;main.c: 78:         DRV8711_SPI_read(0x00);
   399  000246  0E00               	movlw	0
   400  000248  ECCF  F002         	call	_DRV8711_SPI_read
   401  00024C                     
   402                           ;main.c: 79:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   403  00024C  0E0B               	movlw	11
   404  00024E  6E17               	movwf	(??_main+1)^0,c
   405  000250  0E26               	movlw	38
   406  000252  6E16               	movwf	??_main^0,c
   407  000254  0E5E               	movlw	94
   408  000256                     u957:
   409  000256  2EE8               	decfsz	wreg,f,c
   410  000258  D7FE               	bra	u957
   411  00025A  2E16               	decfsz	??_main^0,f,c
   412  00025C  D7FC               	bra	u957
   413  00025E  2E17               	decfsz	(??_main+1)^0,f,c
   414  000260  D7FA               	bra	u957
   415  000262                     
   416                           ;main.c: 80:         setStepSize(Eighth);
   417  000262  0E08               	movlw	8
   418  000264  EC18  F002         	call	_setStepSize
   419  000268                     
   420                           ;main.c: 81:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   421  000268  0E0B               	movlw	11
   422  00026A  6E17               	movwf	(??_main+1)^0,c
   423  00026C  0E26               	movlw	38
   424  00026E  6E16               	movwf	??_main^0,c
   425  000270  0E5E               	movlw	94
   426  000272                     u967:
   427  000272  2EE8               	decfsz	wreg,f,c
   428  000274  D7FE               	bra	u967
   429  000276  2E16               	decfsz	??_main^0,f,c
   430  000278  D7FC               	bra	u967
   431  00027A  2E17               	decfsz	(??_main+1)^0,f,c
   432  00027C  D7FA               	bra	u967
   433  00027E                     
   434                           ;main.c: 82:         DRV8711_SPI_read(0x00);
   435  00027E  0E00               	movlw	0
   436  000280  ECCF  F002         	call	_DRV8711_SPI_read
   437  000284                     
   438                           ;main.c: 83:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   439  000284  0E0B               	movlw	11
   440  000286  6E17               	movwf	(??_main+1)^0,c
   441  000288  0E26               	movlw	38
   442  00028A  6E16               	movwf	??_main^0,c
   443  00028C  0E5E               	movlw	94
   444  00028E                     u977:
   445  00028E  2EE8               	decfsz	wreg,f,c
   446  000290  D7FE               	bra	u977
   447  000292  2E16               	decfsz	??_main^0,f,c
   448  000294  D7FC               	bra	u977
   449  000296  2E17               	decfsz	(??_main+1)^0,f,c
   450  000298  D7FA               	bra	u977
   451  00029A                     
   452                           ;main.c: 84:         stepperSleep(1);
   453  00029A  0E01               	movlw	1
   454  00029C  EC55  F003         	call	_stepperSleep
   455  0002A0                     
   456                           ;main.c: 85:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   457  0002A0  0E0B               	movlw	11
   458  0002A2  6E17               	movwf	(??_main+1)^0,c
   459  0002A4  0E26               	movlw	38
   460  0002A6  6E16               	movwf	??_main^0,c
   461  0002A8  0E5E               	movlw	94
   462  0002AA                     u987:
   463  0002AA  2EE8               	decfsz	wreg,f,c
   464  0002AC  D7FE               	bra	u987
   465  0002AE  2E16               	decfsz	??_main^0,f,c
   466  0002B0  D7FC               	bra	u987
   467  0002B2  2E17               	decfsz	(??_main+1)^0,f,c
   468  0002B4  D7FA               	bra	u987
   469  0002B6                     
   470                           ;main.c: 86:         stepperSleep(0);
   471  0002B6  0E00               	movlw	0
   472  0002B8  EC55  F003         	call	_stepperSleep
   473  0002BC                     
   474                           ;main.c: 87:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   475  0002BC  0E0B               	movlw	11
   476  0002BE  6E17               	movwf	(??_main+1)^0,c
   477  0002C0  0E26               	movlw	38
   478  0002C2  6E16               	movwf	??_main^0,c
   479  0002C4  0E5E               	movlw	94
   480  0002C6                     u997:
   481  0002C6  2EE8               	decfsz	wreg,f,c
   482  0002C8  D7FE               	bra	u997
   483  0002CA  2E16               	decfsz	??_main^0,f,c
   484  0002CC  D7FC               	bra	u997
   485  0002CE  2E17               	decfsz	(??_main+1)^0,f,c
   486  0002D0  D7FA               	bra	u997
   487  0002D2                     
   488                           ;main.c: 88:         for (int i = 0; i<200; i++){
   489  0002D2  0E00               	movlw	0
   490  0002D4  6E19               	movwf	(main@i+1)^0,c
   491  0002D6  0E00               	movlw	0
   492  0002D8  6E18               	movwf	main@i^0,c
   493  0002DA                     l58:
   494  0002DA  888A               	bsf	138,4,c	;volatile
   495  0002DC                     
   496                           ;main.c: 90:             _delay((unsigned long)((10)*(8000000/4000.0)));
   497  0002DC  0E1A               	movlw	26
   498  0002DE  6E16               	movwf	??_main^0,c
   499  0002E0  0EF8               	movlw	248
   500  0002E2                     u1007:
   501  0002E2  2EE8               	decfsz	wreg,f,c
   502  0002E4  D7FE               	bra	u1007
   503  0002E6  2E16               	decfsz	??_main^0,f,c
   504  0002E8  D7FC               	bra	u1007
   505  0002EA  D000               	nop2	
   506  0002EC  988A               	bcf	138,4,c	;volatile
   507  0002EE                     
   508                           ;main.c: 92:             _delay((unsigned long)((10)*(8000000/4000.0)));
   509  0002EE  0E1A               	movlw	26
   510  0002F0  6E16               	movwf	??_main^0,c
   511  0002F2  0EF8               	movlw	248
   512  0002F4                     u1017:
   513  0002F4  2EE8               	decfsz	wreg,f,c
   514  0002F6  D7FE               	bra	u1017
   515  0002F8  2E16               	decfsz	??_main^0,f,c
   516  0002FA  D7FC               	bra	u1017
   517  0002FC  D000               	nop2	
   518  0002FE                     
   519                           ;main.c: 93:             writeString("step\n");
   520  0002FE  0E05               	movlw	low STR_1
   521  000300  6E02               	movwf	writeString@message^0,c
   522  000302  0E02               	movlw	high STR_1
   523  000304  6E03               	movwf	(writeString@message+1)^0,c
   524  000306  EC0C  F003         	call	_writeString	;wreg free
   525  00030A                     
   526                           ;main.c: 94:         }
   527  00030A  4A18               	infsnz	main@i^0,f,c
   528  00030C  2A19               	incf	(main@i+1)^0,f,c
   529  00030E  BE19               	btfsc	(main@i+1)^0,7,c
   530  000310  EF93  F001         	goto	u931
   531  000314  5019               	movf	(main@i+1)^0,w,c
   532  000316  E109               	bnz	u930
   533  000318  0EC8               	movlw	200
   534  00031A  5C18               	subwf	main@i^0,w,c
   535  00031C  A0D8               	btfss	status,0,c
   536  00031E  EF93  F001         	goto	u931
   537  000322  EF95  F001         	goto	u930
   538  000326                     u931:
   539  000326  EF6D  F001         	goto	l58
   540  00032A                     u930:
   541  00032A  EF15  F001         	goto	l1769
   542  00032E  EF00  F000         	goto	start
   543  000332                     __end_of_main:
   544                           	callstack 0
   545                           
   546 ;; *************** function _stepperSleep *****************
   547 ;; Defined at:
   548 ;;		line 236 in file "step/step.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;  in              1    wreg     _Bool 
   551 ;; Auto vars:     Size  Location     Type
   552 ;;  in              1   13[COMRAM] _Bool 
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1
   562 ;;      Params:         0       0       0
   563 ;;      Locals:         1       0       0
   564 ;;      Temps:          0       0       0
   565 ;;      Totals:         1       0       0
   566 ;;Total ram usage:        1 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; Hardware stack levels required when called:    3
   569 ;; This function calls:
   570 ;;		_DRV8711_SPI_CMD
   571 ;; This function is called by:
   572 ;;		_main
   573 ;;		_Step
   574 ;;		_slowStepTest
   575 ;;		_moveUntilZ
   576 ;;		_calibrate
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text1
   581  0006AA                     __ptext1:
   582                           	callstack 0
   583  0006AA                     _stepperSleep:
   584                           	callstack 27
   585                           
   586                           ;incstack = 0
   587                           ;stepperSleep@in stored from wreg
   588  0006AA  6E0E               	movwf	stepperSleep@in^0,c
   589  0006AC                     
   590                           ;step/step.c: 237:     if (in) {
   591  0006AC  500E               	movf	stepperSleep@in^0,w,c
   592  0006AE  B4D8               	btfsc	status,2,c
   593  0006B0  EF5C  F003         	goto	u901
   594  0006B4  EF5E  F003         	goto	u900
   595  0006B8                     u901:
   596  0006B8  EF62  F003         	goto	l1731
   597  0006BC                     u900:
   598  0006BC                     
   599                           ;step/step.c: 238:         control_bits &= ~1;
   600  0006BC  9025               	bcf	_control_bits^0,0,c
   601  0006BE  928B               	bcf	139,1,c	;volatile
   602  0006C0  EF64  F003         	goto	l1735
   603  0006C4                     l1731:
   604                           
   605                           ;step/step.c: 241:         control_bits |= 1;
   606  0006C4  8025               	bsf	_control_bits^0,0,c
   607  0006C6  828B               	bsf	139,1,c	;volatile
   608  0006C8                     l1735:
   609                           
   610                           ;step/step.c: 244:     DRV8711_SPI_CMD(0x00, control_bits);
   611  0006C8  C025  F006         	movff	_control_bits,DRV8711_SPI_CMD@cmd
   612  0006CC  C026  F007         	movff	_control_bits+1,DRV8711_SPI_CMD@cmd+1
   613  0006D0  0E00               	movlw	0
   614  0006D2  EC8C  F002         	call	_DRV8711_SPI_CMD
   615  0006D6  0012               	return		;funcret
   616  0006D8                     __end_of_stepperSleep:
   617                           	callstack 0
   618                           
   619 ;; *************** function _setUartFunction *****************
   620 ;; Defined at:
   621 ;;		line 11 in file "EUSART_Helpers/EUSART_Helpers.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;  uart_write_l    2    0[COMRAM] PTR FTN()void 
   624 ;;		 -> EUSART2_Write(1), 
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		wreg, status,2, status,0
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0   BANK1
   636 ;;      Params:         2       0       0
   637 ;;      Locals:         0       0       0
   638 ;;      Temps:          0       0       0
   639 ;;      Totals:         2       0       0
   640 ;;Total ram usage:        2 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; This function calls:
   643 ;;		Nothing
   644 ;; This function is called by:
   645 ;;		_main
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text2
   650  0007AE                     __ptext2:
   651                           	callstack 0
   652  0007AE                     _setUartFunction:
   653                           	callstack 30
   654  0007AE                     
   655                           ;EUSART_Helpers/EUSART_Helpers.c: 12:     uart_write = uart_write_local_function;
   656  0007AE  C001  F01A         	movff	setUartFunction@uart_write_local_function,_uart_write
   657  0007B2  C002  F01B         	movff	setUartFunction@uart_write_local_function+1,_uart_write+1
   658  0007B6  0012               	return		;funcret
   659  0007B8                     __end_of_setUartFunction:
   660                           	callstack 0
   661                           
   662 ;; *************** function _setStepSize *****************
   663 ;; Defined at:
   664 ;;		line 264 in file "step/step.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;  size            1    wreg     enum E6122
   667 ;; Auto vars:     Size  Location     Type
   668 ;;  size            1   19[COMRAM] enum E6122
   669 ;;  step_size_bi    1   20[COMRAM] unsigned char 
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1
   679 ;;      Params:         0       0       0
   680 ;;      Locals:         2       0       0
   681 ;;      Temps:          6       0       0
   682 ;;      Totals:         8       0       0
   683 ;;Total ram usage:        8 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; Hardware stack levels required when called:    3
   686 ;; This function calls:
   687 ;;		_DRV8711_SPI_CMD
   688 ;; This function is called by:
   689 ;;		_main
   690 ;;		_Step
   691 ;;		_slowStepTest
   692 ;;		_moveUntilZ
   693 ;;		_calibrate
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text3
   698  000430                     __ptext3:
   699                           	callstack 0
   700  000430                     _setStepSize:
   701                           	callstack 27
   702                           
   703                           ;incstack = 0
   704                           ;setStepSize@size stored from wreg
   705  000430  6E14               	movwf	setStepSize@size^0,c
   706  000432                     
   707                           ;step/step.c: 266:     uint8_t step_size_bits;;step/step.c: 267:     switch (size) {
   708  000432  EF41  F002         	goto	l1681
   709  000436                     l403:
   710                           
   711                           ;step/step.c: 269:         {;step/step.c: 270:             __nop();
   712  000436  F000               	nop	
   713                           
   714                           ;step/step.c: 271:             __nop();
   715  000438  F000               	nop	
   716                           
   717                           ;step/step.c: 272:             __nop();
   718  00043A  F000               	nop	
   719  00043C                     
   720                           ;step/step.c: 273:             step_size_bits = 0b0000;
   721  00043C  0E00               	movlw	0
   722  00043E  6E15               	movwf	setStepSize@step_size_bits^0,c
   723                           
   724                           ;step/step.c: 274:             break;
   725  000440  EF66  F002         	goto	l1683
   726  000444                     l405:
   727                           
   728                           ;step/step.c: 277:         {;step/step.c: 278:             __nop();
   729  000444  F000               	nop	
   730                           
   731                           ;step/step.c: 279:             __nop();
   732  000446  F000               	nop	
   733                           
   734                           ;step/step.c: 280:             __nop();
   735  000448  F000               	nop	
   736  00044A                     
   737                           ;step/step.c: 281:             step_size_bits = 0b0001;
   738  00044A  0E01               	movlw	1
   739  00044C  6E15               	movwf	setStepSize@step_size_bits^0,c
   740                           
   741                           ;step/step.c: 282:             break;
   742  00044E  EF66  F002         	goto	l1683
   743  000452                     l406:
   744                           
   745                           ;step/step.c: 285:         {;step/step.c: 286:             __nop();
   746  000452  F000               	nop	
   747                           
   748                           ;step/step.c: 287:             __nop();
   749  000454  F000               	nop	
   750                           
   751                           ;step/step.c: 288:             __nop();
   752  000456  F000               	nop	
   753  000458                     
   754                           ;step/step.c: 289:             step_size_bits = 0b0010;
   755  000458  0E02               	movlw	2
   756  00045A  6E15               	movwf	setStepSize@step_size_bits^0,c
   757                           
   758                           ;step/step.c: 290:             break;
   759  00045C  EF66  F002         	goto	l1683
   760  000460                     l407:
   761                           
   762                           ;step/step.c: 293:         {;step/step.c: 294:             __nop();
   763  000460  F000               	nop	
   764                           
   765                           ;step/step.c: 295:             __nop();
   766  000462  F000               	nop	
   767                           
   768                           ;step/step.c: 296:             __nop();
   769  000464  F000               	nop	
   770  000466                     
   771                           ;step/step.c: 297:             step_size_bits = 0b0011;
   772  000466  0E03               	movlw	3
   773  000468  6E15               	movwf	setStepSize@step_size_bits^0,c
   774                           
   775                           ;step/step.c: 298:             break;
   776  00046A  EF66  F002         	goto	l1683
   777  00046E                     l408:
   778                           
   779                           ;step/step.c: 301:         {;step/step.c: 302:             __nop();
   780  00046E  F000               	nop	
   781                           
   782                           ;step/step.c: 303:             __nop();
   783  000470  F000               	nop	
   784                           
   785                           ;step/step.c: 304:             __nop();
   786  000472  F000               	nop	
   787  000474                     
   788                           ;step/step.c: 305:             step_size_bits = 0b0100;
   789  000474  0E04               	movlw	4
   790  000476  6E15               	movwf	setStepSize@step_size_bits^0,c
   791                           
   792                           ;step/step.c: 306:             break;
   793  000478  EF66  F002         	goto	l1683
   794  00047C                     l411:
   795  00047C  928B               	bcf	139,1,c	;volatile
   796  00047E  EF8B  F002         	goto	l413
   797  000482                     l1681:
   798  000482  5014               	movf	setStepSize@size^0,w,c
   799  000484  6E0E               	movwf	??_setStepSize^0,c
   800  000486  6A0F               	clrf	(??_setStepSize+1)^0,c
   801                           
   802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   803                           ; Switch size 1, requested type "simple"
   804                           ; Number of cases is 1, Range of values is 0 to 0
   805                           ; switch strategies available:
   806                           ; Name         Instructions Cycles
   807                           ; simple_byte            4     3 (average)
   808                           ;	Chosen strategy is simple_byte
   809  000488  500F               	movf	(??_setStepSize+1)^0,w,c
   810  00048A  0A00               	xorlw	0	; case 0
   811  00048C  B4D8               	btfsc	status,2,c
   812  00048E  EF4B  F002         	goto	l1883
   813  000492  EF3E  F002         	goto	l411
   814  000496                     l1883:
   815                           
   816                           ; Switch size 1, requested type "simple"
   817                           ; Number of cases is 6, Range of values is 0 to 16
   818                           ; switch strategies available:
   819                           ; Name         Instructions Cycles
   820                           ; simple_byte           19    10 (average)
   821                           ;	Chosen strategy is simple_byte
   822  000496  500E               	movf	??_setStepSize^0,w,c
   823  000498  0A00               	xorlw	0	; case 0
   824  00049A  B4D8               	btfsc	status,2,c
   825  00049C  EF3E  F002         	goto	l411
   826  0004A0  0A01               	xorlw	1	; case 1
   827  0004A2  B4D8               	btfsc	status,2,c
   828  0004A4  EF1B  F002         	goto	l403
   829  0004A8  0A03               	xorlw	3	; case 2
   830  0004AA  B4D8               	btfsc	status,2,c
   831  0004AC  EF22  F002         	goto	l405
   832  0004B0  0A06               	xorlw	6	; case 4
   833  0004B2  B4D8               	btfsc	status,2,c
   834  0004B4  EF29  F002         	goto	l406
   835  0004B8  0A0C               	xorlw	12	; case 8
   836  0004BA  B4D8               	btfsc	status,2,c
   837  0004BC  EF30  F002         	goto	l407
   838  0004C0  0A18               	xorlw	24	; case 16
   839  0004C2  B4D8               	btfsc	status,2,c
   840  0004C4  EF37  F002         	goto	l408
   841  0004C8  EF3E  F002         	goto	l411
   842  0004CC                     l1683:
   843                           
   844                           ;step/step.c: 320:     control_bits = ((control_bits & 0b111110000111) | step_size_bits 
      +                          << 3);
   845  0004CC  5015               	movf	setStepSize@step_size_bits^0,w,c
   846  0004CE  6E0E               	movwf	??_setStepSize^0,c
   847  0004D0  6A0F               	clrf	(??_setStepSize+1)^0,c
   848  0004D2  90D8               	bcf	status,0,c
   849  0004D4  360E               	rlcf	??_setStepSize^0,f,c
   850  0004D6  360F               	rlcf	(??_setStepSize+1)^0,f,c
   851  0004D8  90D8               	bcf	status,0,c
   852  0004DA  360E               	rlcf	??_setStepSize^0,f,c
   853  0004DC  360F               	rlcf	(??_setStepSize+1)^0,f,c
   854  0004DE  90D8               	bcf	status,0,c
   855  0004E0  360E               	rlcf	??_setStepSize^0,f,c
   856  0004E2  360F               	rlcf	(??_setStepSize+1)^0,f,c
   857  0004E4  0E87               	movlw	135
   858  0004E6  6E10               	movwf	(??_setStepSize+2)^0,c
   859  0004E8  0E0F               	movlw	15
   860  0004EA  6E11               	movwf	(??_setStepSize+3)^0,c
   861  0004EC  C025  F012         	movff	_control_bits,??_setStepSize+4
   862  0004F0  C026  F013         	movff	_control_bits+1,??_setStepSize+5
   863  0004F4  5010               	movf	(??_setStepSize+2)^0,w,c
   864  0004F6  1612               	andwf	(??_setStepSize+4)^0,f,c
   865  0004F8  5011               	movf	(??_setStepSize+3)^0,w,c
   866  0004FA  1613               	andwf	(??_setStepSize+5)^0,f,c
   867  0004FC  500E               	movf	??_setStepSize^0,w,c
   868  0004FE  1012               	iorwf	(??_setStepSize+4)^0,w,c
   869  000500  6E25               	movwf	_control_bits^0,c
   870  000502  500F               	movf	(??_setStepSize+1)^0,w,c
   871  000504  1013               	iorwf	(??_setStepSize+5)^0,w,c
   872  000506  6E26               	movwf	(_control_bits+1)^0,c
   873  000508                     
   874                           ;step/step.c: 321:     DRV8711_SPI_CMD(0x00, control_bits);
   875  000508  C025  F006         	movff	_control_bits,DRV8711_SPI_CMD@cmd
   876  00050C  C026  F007         	movff	_control_bits+1,DRV8711_SPI_CMD@cmd+1
   877  000510  0E00               	movlw	0
   878  000512  EC8C  F002         	call	_DRV8711_SPI_CMD
   879  000516                     l413:
   880  000516  0012               	return		;funcret
   881  000518                     __end_of_setStepSize:
   882                           	callstack 0
   883                           
   884 ;; *************** function _DRV8711_SPI_CMD *****************
   885 ;; Defined at:
   886 ;;		line 85 in file "step/step.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  addr            1    wreg     unsigned char 
   889 ;;  cmd             2    5[COMRAM] unsigned short 
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  addr            1    9[COMRAM] unsigned char 
   892 ;;  cmd12           2   11[COMRAM] unsigned short 
   893 ;;  addr4           1   10[COMRAM] unsigned char 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1
   903 ;;      Params:         2       0       0
   904 ;;      Locals:         4       0       0
   905 ;;      Temps:          2       0       0
   906 ;;      Totals:         8       0       0
   907 ;;Total ram usage:        8 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; Hardware stack levels required when called:    2
   910 ;; This function calls:
   911 ;;		_SPI1_WriteByte
   912 ;;		_write1byteHex
   913 ;;		_writeByte
   914 ;;		_writeString
   915 ;; This function is called by:
   916 ;;		_stepperSleep
   917 ;;		_setStepSize
   918 ;;		_initDRV8711
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text4
   923  000518                     __ptext4:
   924                           	callstack 0
   925  000518                     _DRV8711_SPI_CMD:
   926                           	callstack 27
   927                           
   928                           ;incstack = 0
   929                           ;DRV8711_SPI_CMD@addr stored from wreg
   930  000518  6E0A               	movwf	DRV8711_SPI_CMD@addr^0,c
   931  00051A                     
   932                           ;step/step.c: 90:     uint8_t addr4 = (addr & 0b0111);
   933  00051A  500A               	movf	DRV8711_SPI_CMD@addr^0,w,c
   934  00051C  0B07               	andlw	7
   935  00051E  6E0B               	movwf	DRV8711_SPI_CMD@addr4^0,c
   936                           
   937                           ;step/step.c: 91:     uint16_t cmd12 = (cmd & 0xFFF);
   938  000520  0EFF               	movlw	255
   939  000522  1406               	andwf	DRV8711_SPI_CMD@cmd^0,w,c
   940  000524  6E0C               	movwf	DRV8711_SPI_CMD@cmd12^0,c
   941  000526  0E0F               	movlw	15
   942  000528  1407               	andwf	(DRV8711_SPI_CMD@cmd+1)^0,w,c
   943  00052A  6E0D               	movwf	(DRV8711_SPI_CMD@cmd12+1)^0,c
   944  00052C  848B               	bsf	139,2,c	;volatile
   945  00052E                     
   946                           ;step/step.c: 94:     SPI1_WriteByte((addr4<<4) | (cmd12>>8));
   947  00052E  C00C  F008         	movff	DRV8711_SPI_CMD@cmd12,??_DRV8711_SPI_CMD
   948  000532  C00D  F009         	movff	DRV8711_SPI_CMD@cmd12+1,??_DRV8711_SPI_CMD+1
   949  000536  C009  F008         	movff	??_DRV8711_SPI_CMD+1,??_DRV8711_SPI_CMD
   950  00053A  6A09               	clrf	(??_DRV8711_SPI_CMD+1)^0,c
   951  00053C  380B               	swapf	DRV8711_SPI_CMD@addr4^0,w,c
   952  00053E  0BF0               	andlw	240
   953  000540  1008               	iorwf	??_DRV8711_SPI_CMD^0,w,c
   954  000542  ECEB  F003         	call	_SPI1_WriteByte
   955  000546                     
   956                           ;step/step.c: 95:     SPI1_WriteByte(cmd12 & 0xFF);
   957  000546  500C               	movf	DRV8711_SPI_CMD@cmd12^0,w,c
   958  000548  ECEB  F003         	call	_SPI1_WriteByte
   959  00054C  948B               	bcf	139,2,c	;volatile
   960  00054E                     
   961                           ;step/step.c: 98:     writeString("w:");
   962  00054E  0E13               	movlw	low STR_2
   963  000550  6E02               	movwf	writeString@message^0,c
   964  000552  0E02               	movlw	high STR_2
   965  000554  6E03               	movwf	(writeString@message+1)^0,c
   966  000556  EC0C  F003         	call	_writeString	;wreg free
   967  00055A                     
   968                           ;step/step.c: 99:     writeByte('\t');
   969  00055A  0E09               	movlw	9
   970  00055C  EC96  F003         	call	_writeByte
   971  000560                     
   972                           ;step/step.c: 100:     write1byteHex((addr4<<4) | (cmd12>>8));
   973  000560  C00C  F008         	movff	DRV8711_SPI_CMD@cmd12,??_DRV8711_SPI_CMD
   974  000564  C00D  F009         	movff	DRV8711_SPI_CMD@cmd12+1,??_DRV8711_SPI_CMD+1
   975  000568  C009  F008         	movff	??_DRV8711_SPI_CMD+1,??_DRV8711_SPI_CMD
   976  00056C  6A09               	clrf	(??_DRV8711_SPI_CMD+1)^0,c
   977  00056E  380B               	swapf	DRV8711_SPI_CMD@addr4^0,w,c
   978  000570  0BF0               	andlw	240
   979  000572  1008               	iorwf	??_DRV8711_SPI_CMD^0,w,c
   980  000574  EC99  F001         	call	_write1byteHex
   981  000578                     
   982                           ;step/step.c: 101:     writeByte('\t');
   983  000578  0E09               	movlw	9
   984  00057A  EC96  F003         	call	_writeByte
   985  00057E                     
   986                           ;step/step.c: 102:     write1byteHex(cmd12 & 0xFF);
   987  00057E  500C               	movf	DRV8711_SPI_CMD@cmd12^0,w,c
   988  000580  EC99  F001         	call	_write1byteHex
   989  000584                     
   990                           ;step/step.c: 103:     writeByte('\t');
   991  000584  0E09               	movlw	9
   992  000586  EC96  F003         	call	_writeByte
   993  00058A                     
   994                           ;step/step.c: 104:     writeString("No r");
   995  00058A  0E0B               	movlw	low STR_3
   996  00058C  6E02               	movwf	writeString@message^0,c
   997  00058E  0E02               	movlw	high STR_3
   998  000590  6E03               	movwf	(writeString@message+1)^0,c
   999  000592  EC0C  F003         	call	_writeString	;wreg free
  1000  000596                     
  1001                           ;step/step.c: 105:     writeByte('\n');
  1002  000596  0E0A               	movlw	10
  1003  000598  EC96  F003         	call	_writeByte
  1004  00059C  0012               	return		;funcret
  1005  00059E                     __end_of_DRV8711_SPI_CMD:
  1006                           	callstack 0
  1007                           
  1008 ;; *************** function _SPI1_WriteByte *****************
  1009 ;; Defined at:
  1010 ;;		line 131 in file "mcc_generated_files/spi1.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  byte            1    wreg     unsigned char 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  byte            1    0[COMRAM] unsigned char 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1
  1024 ;;      Params:         0       0       0
  1025 ;;      Locals:         1       0       0
  1026 ;;      Temps:          0       0       0
  1027 ;;      Totals:         1       0       0
  1028 ;;Total ram usage:        1 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; This function calls:
  1031 ;;		Nothing
  1032 ;; This function is called by:
  1033 ;;		_DRV8711_SPI_CMD
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           	psect	text5
  1038  0007D6                     __ptext5:
  1039                           	callstack 0
  1040  0007D6                     _SPI1_WriteByte:
  1041                           	callstack 28
  1042                           
  1043                           ;incstack = 0
  1044                           ;SPI1_WriteByte@byte stored from wreg
  1045  0007D6  6E01               	movwf	SPI1_WriteByte@byte^0,c
  1046  0007D8                     
  1047                           ;mcc_generated_files/spi1.c: 131: void SPI1_WriteByte(uint8_t byte);mcc_generated_files/
      +                          spi1.c: 132: {;mcc_generated_files/spi1.c: 133:     SSP1BUF = byte;
  1048  0007D8  C001  FFC9         	movff	SPI1_WriteByte@byte,4041	;volatile
  1049  0007DC  0012               	return		;funcret
  1050  0007DE                     __end_of_SPI1_WriteByte:
  1051                           	callstack 0
  1052                           
  1053 ;; *************** function _SYSTEM_Initialize *****************
  1054 ;; Defined at:
  1055 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1
  1069 ;;      Params:         0       0       0
  1070 ;;      Locals:         0       0       0
  1071 ;;      Temps:          0       0       0
  1072 ;;      Totals:         0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    2
  1076 ;; This function calls:
  1077 ;;		_EUSART2_Initialize
  1078 ;;		_OSCILLATOR_Initialize
  1079 ;;		_PIN_MANAGER_Initialize
  1080 ;;		_SPI1_Initialize
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text6
  1087  00077C                     __ptext6:
  1088                           	callstack 0
  1089  00077C                     _SYSTEM_Initialize:
  1090                           	callstack 28
  1091  00077C                     
  1092                           ;mcc_generated_files/mcc.c: 53:     SPI1_Initialize();
  1093  00077C  ECC7  F003         	call	_SPI1_Initialize	;wreg free
  1094                           
  1095                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  1096  000780  EC6C  F003         	call	_PIN_MANAGER_Initialize	;wreg free
  1097                           
  1098                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  1099  000784  ECD0  F003         	call	_OSCILLATOR_Initialize	;wreg free
  1100  000788                     
  1101                           ;mcc_generated_files/mcc.c: 56:     EUSART2_Initialize();
  1102  000788  EC36  F003         	call	_EUSART2_Initialize	;wreg free
  1103  00078C  0012               	return		;funcret
  1104  00078E                     __end_of_SYSTEM_Initialize:
  1105                           	callstack 0
  1106                           
  1107 ;; *************** function _SPI1_Initialize *****************
  1108 ;; Defined at:
  1109 ;;		line 62 in file "mcc_generated_files/spi1.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;		None
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;		None
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      void 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMRAM   BANK0   BANK1
  1123 ;;      Params:         0       0       0
  1124 ;;      Locals:         0       0       0
  1125 ;;      Temps:          0       0       0
  1126 ;;      Totals:         0       0       0
  1127 ;;Total ram usage:        0 bytes
  1128 ;; Hardware stack levels used:    1
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_SYSTEM_Initialize
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text7
  1137  00078E                     __ptext7:
  1138                           	callstack 0
  1139  00078E                     _SPI1_Initialize:
  1140                           	callstack 29
  1141  00078E                     
  1142                           ;mcc_generated_files/spi1.c: 65:     SSP1STAT = 0x40;
  1143  00078E  0E40               	movlw	64
  1144  000790  6EC7               	movwf	199,c	;volatile
  1145                           
  1146                           ;mcc_generated_files/spi1.c: 66:     SSP1CON1 = 0x01;
  1147  000792  0E01               	movlw	1
  1148  000794  6EC6               	movwf	198,c	;volatile
  1149                           
  1150                           ;mcc_generated_files/spi1.c: 67:     SSP1ADD = 0x01;
  1151  000796  0E01               	movlw	1
  1152  000798  6EC8               	movwf	200,c	;volatile
  1153  00079A                     
  1154                           ;mcc_generated_files/spi1.c: 68:     TRISCbits.TRISC3 = 0;
  1155  00079A  9694               	bcf	148,3,c	;volatile
  1156  00079C                     
  1157                           ;mcc_generated_files/spi1.c: 69:     SSP1CON1bits.SSPEN = 0;
  1158  00079C  9AC6               	bcf	198,5,c	;volatile
  1159  00079E  0012               	return		;funcret
  1160  0007A0                     __end_of_SPI1_Initialize:
  1161                           	callstack 0
  1162                           
  1163 ;; *************** function _PIN_MANAGER_Initialize *****************
  1164 ;; Defined at:
  1165 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;		None
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1
  1179 ;;      Params:         0       0       0
  1180 ;;      Locals:         0       0       0
  1181 ;;      Temps:          0       0       0
  1182 ;;      Totals:         0       0       0
  1183 ;;Total ram usage:        0 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_SYSTEM_Initialize
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text8
  1193  0006D8                     __ptext8:
  1194                           	callstack 0
  1195  0006D8                     _PIN_MANAGER_Initialize:
  1196                           	callstack 29
  1197  0006D8                     
  1198                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  1199  0006D8  0E00               	movlw	0
  1200  0006DA  6E89               	movwf	137,c	;volatile
  1201                           
  1202                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x30;
  1203  0006DC  0E30               	movlw	48
  1204  0006DE  6E8A               	movwf	138,c	;volatile
  1205                           
  1206                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  1207  0006E0  0E00               	movlw	0
  1208  0006E2  6E8B               	movwf	139,c	;volatile
  1209  0006E4                     
  1210                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0xFF;
  1211  0006E4  6892               	setf	146,c	;volatile
  1212                           
  1213                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x8F;
  1214  0006E6  0E8F               	movlw	143
  1215  0006E8  6E93               	movwf	147,c	;volatile
  1216                           
  1217                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xD1;
  1218  0006EA  0ED1               	movlw	209
  1219  0006EC  6E94               	movwf	148,c	;volatile
  1220                           
  1221                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC0;
  1222  0006EE  0EC0               	movlw	192
  1223  0006F0  010F               	movlb	15	; () banked
  1224  0006F2  6F3A               	movwf	58,b	;volatile
  1225                           
  1226                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x0F;
  1227  0006F4  0E0F               	movlw	15
  1228  0006F6  6F39               	movwf	57,b	;volatile
  1229                           
  1230                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x2F;
  1231  0006F8  0E2F               	movlw	47
  1232  0006FA  6F38               	movwf	56,b	;volatile
  1233                           
  1234                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  1235  0006FC  0E00               	movlw	0
  1236  0006FE  6E61               	movwf	97,c	;volatile
  1237  000700                     
  1238                           ; BSR set to: 15
  1239                           ;mcc_generated_files/pin_manager.c: 82:     INTCON2bits.nRBPU = 1;
  1240  000700  8EF1               	bsf	241,7,c	;volatile
  1241  000702                     
  1242                           ; BSR set to: 15
  1243  000702  0012               	return		;funcret
  1244  000704                     __end_of_PIN_MANAGER_Initialize:
  1245                           	callstack 0
  1246                           
  1247 ;; *************** function _OSCILLATOR_Initialize *****************
  1248 ;; Defined at:
  1249 ;;		line 59 in file "mcc_generated_files/mcc.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;		None
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;		None
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      void 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1
  1263 ;;      Params:         0       0       0
  1264 ;;      Locals:         0       0       0
  1265 ;;      Temps:          0       0       0
  1266 ;;      Totals:         0       0       0
  1267 ;;Total ram usage:        0 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; This function calls:
  1270 ;;		Nothing
  1271 ;; This function is called by:
  1272 ;;		_SYSTEM_Initialize
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text9
  1277  0007A0                     __ptext9:
  1278                           	callstack 0
  1279  0007A0                     _OSCILLATOR_Initialize:
  1280                           	callstack 29
  1281  0007A0                     
  1282                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x62;
  1283  0007A0  0E62               	movlw	98
  1284  0007A2  6ED3               	movwf	211,c	;volatile
  1285                           
  1286                           ;mcc_generated_files/mcc.c: 64:     OSCCON2 = 0x04;
  1287  0007A4  0E04               	movlw	4
  1288  0007A6  6ED2               	movwf	210,c	;volatile
  1289                           
  1290                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  1291  0007A8  0E00               	movlw	0
  1292  0007AA  6E9B               	movwf	155,c	;volatile
  1293  0007AC  0012               	return		;funcret
  1294  0007AE                     __end_of_OSCILLATOR_Initialize:
  1295                           	callstack 0
  1296                           
  1297 ;; *************** function _EUSART2_Initialize *****************
  1298 ;; Defined at:
  1299 ;;		line 66 in file "mcc_generated_files/eusart2.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1
  1313 ;;      Params:         0       0       0
  1314 ;;      Locals:         0       0       0
  1315 ;;      Temps:          0       0       0
  1316 ;;      Totals:         0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    1
  1320 ;; This function calls:
  1321 ;;		_EUSART2_SetErrorHandler
  1322 ;;		_EUSART2_SetFramingErrorHandler
  1323 ;;		_EUSART2_SetOverrunErrorHandler
  1324 ;; This function is called by:
  1325 ;;		_SYSTEM_Initialize
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           	psect	text10
  1330  00066C                     __ptext10:
  1331                           	callstack 0
  1332  00066C                     _EUSART2_Initialize:
  1333                           	callstack 28
  1334  00066C                     
  1335                           ;mcc_generated_files/eusart2.c: 71:     BAUDCON2 = 0x08;
  1336  00066C  0E08               	movlw	8
  1337  00066E  6E70               	movwf	112,c	;volatile
  1338                           
  1339                           ;mcc_generated_files/eusart2.c: 74:     RCSTA2 = 0x80;
  1340  000670  0E80               	movlw	128
  1341  000672  6E71               	movwf	113,c	;volatile
  1342                           
  1343                           ;mcc_generated_files/eusart2.c: 77:     TXSTA2 = 0x24;
  1344  000674  0E24               	movlw	36
  1345  000676  6E72               	movwf	114,c	;volatile
  1346                           
  1347                           ;mcc_generated_files/eusart2.c: 80:     SPBRG2 = 0xCF;
  1348  000678  0ECF               	movlw	207
  1349  00067A  6E75               	movwf	117,c	;volatile
  1350                           
  1351                           ;mcc_generated_files/eusart2.c: 83:     SPBRGH2 = 0x00;
  1352  00067C  0E00               	movlw	0
  1353  00067E  6E76               	movwf	118,c	;volatile
  1354  000680                     
  1355                           ;mcc_generated_files/eusart2.c: 86:     EUSART2_SetFramingErrorHandler(EUSART2_DefaultFr
      +                          amingErrorHandler);
  1356  000680  0E00               	movlw	0
  1357  000682  6E01               	movwf	EUSART2_SetFramingErrorHandler@interruptHandler^0,c
  1358  000684  0E00               	movlw	0
  1359  000686  6E02               	movwf	(EUSART2_SetFramingErrorHandler@interruptHandler+1)^0,c
  1360  000688  ECE1  F003         	call	_EUSART2_SetFramingErrorHandler	;wreg free
  1361  00068C                     
  1362                           ;mcc_generated_files/eusart2.c: 87:     EUSART2_SetOverrunErrorHandler(EUSART2_DefaultOv
      +                          errunErrorHandler);
  1363  00068C  0E00               	movlw	0
  1364  00068E  6E01               	movwf	EUSART2_SetOverrunErrorHandler@interruptHandler^0,c
  1365  000690  0E00               	movlw	0
  1366  000692  6E02               	movwf	(EUSART2_SetOverrunErrorHandler@interruptHandler+1)^0,c
  1367  000694  ECDC  F003         	call	_EUSART2_SetOverrunErrorHandler	;wreg free
  1368  000698                     
  1369                           ;mcc_generated_files/eusart2.c: 88:     EUSART2_SetErrorHandler(EUSART2_DefaultErrorHand
      +                          ler);
  1370  000698  0E00               	movlw	0
  1371  00069A  6E01               	movwf	EUSART2_SetErrorHandler@interruptHandler^0,c
  1372  00069C  0E00               	movlw	0
  1373  00069E  6E02               	movwf	(EUSART2_SetErrorHandler@interruptHandler+1)^0,c
  1374  0006A0  ECE6  F003         	call	_EUSART2_SetErrorHandler	;wreg free
  1375  0006A4                     
  1376                           ;mcc_generated_files/eusart2.c: 90:     eusart2RxLastError.status = 0;
  1377  0006A4  0E00               	movlw	0
  1378  0006A6  6E24               	movwf	_eusart2RxLastError^0,c	;volatile
  1379  0006A8  0012               	return		;funcret
  1380  0006AA                     __end_of_EUSART2_Initialize:
  1381                           	callstack 0
  1382                           
  1383 ;; *************** function _EUSART2_SetOverrunErrorHandler *****************
  1384 ;; Defined at:
  1385 ;;		line 161 in file "mcc_generated_files/eusart2.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;  interruptHan    2    0[COMRAM] PTR FTN()void 
  1388 ;;		 -> EUSART2_DefaultOverrunErrorHandler(1), 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;		None
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, status,0
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1
  1400 ;;      Params:         2       0       0
  1401 ;;      Locals:         0       0       0
  1402 ;;      Temps:          0       0       0
  1403 ;;      Totals:         2       0       0
  1404 ;;Total ram usage:        2 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; This function calls:
  1407 ;;		Nothing
  1408 ;; This function is called by:
  1409 ;;		_EUSART2_Initialize
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text11
  1414  0007B8                     __ptext11:
  1415                           	callstack 0
  1416  0007B8                     _EUSART2_SetOverrunErrorHandler:
  1417                           	callstack 28
  1418  0007B8                     
  1419                           ;mcc_generated_files/eusart2.c: 162:     EUSART2_OverrunErrorHandler = interruptHandler;
  1420  0007B8  C001  F01E         	movff	EUSART2_SetOverrunErrorHandler@interruptHandler,_EUSART2_OverrunErrorHandler
  1421  0007BC  C002  F01F         	movff	EUSART2_SetOverrunErrorHandler@interruptHandler+1,_EUSART2_OverrunErrorHandler+1
  1422  0007C0  0012               	return		;funcret
  1423  0007C2                     __end_of_EUSART2_SetOverrunErrorHandler:
  1424                           	callstack 0
  1425                           
  1426 ;; *************** function _EUSART2_SetFramingErrorHandler *****************
  1427 ;; Defined at:
  1428 ;;		line 157 in file "mcc_generated_files/eusart2.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  interruptHan    2    0[COMRAM] PTR FTN()void 
  1431 ;;		 -> EUSART2_DefaultFramingErrorHandler(1), 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;		None
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, status,2, status,0
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1
  1443 ;;      Params:         2       0       0
  1444 ;;      Locals:         0       0       0
  1445 ;;      Temps:          0       0       0
  1446 ;;      Totals:         2       0       0
  1447 ;;Total ram usage:        2 bytes
  1448 ;; Hardware stack levels used:    1
  1449 ;; This function calls:
  1450 ;;		Nothing
  1451 ;; This function is called by:
  1452 ;;		_EUSART2_Initialize
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text12
  1457  0007C2                     __ptext12:
  1458                           	callstack 0
  1459  0007C2                     _EUSART2_SetFramingErrorHandler:
  1460                           	callstack 28
  1461  0007C2                     
  1462                           ;mcc_generated_files/eusart2.c: 158:     EUSART2_FramingErrorHandler = interruptHandler;
  1463  0007C2  C001  F020         	movff	EUSART2_SetFramingErrorHandler@interruptHandler,_EUSART2_FramingErrorHandler
  1464  0007C6  C002  F021         	movff	EUSART2_SetFramingErrorHandler@interruptHandler+1,_EUSART2_FramingErrorHandler+1
  1465  0007CA  0012               	return		;funcret
  1466  0007CC                     __end_of_EUSART2_SetFramingErrorHandler:
  1467                           	callstack 0
  1468                           
  1469 ;; *************** function _EUSART2_SetErrorHandler *****************
  1470 ;; Defined at:
  1471 ;;		line 165 in file "mcc_generated_files/eusart2.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  interruptHan    2    0[COMRAM] PTR FTN()void 
  1474 ;;		 -> EUSART2_DefaultErrorHandler(1), 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;		None
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2, status,0
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1
  1486 ;;      Params:         2       0       0
  1487 ;;      Locals:         0       0       0
  1488 ;;      Temps:          0       0       0
  1489 ;;      Totals:         2       0       0
  1490 ;;Total ram usage:        2 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_EUSART2_Initialize
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text13
  1500  0007CC                     __ptext13:
  1501                           	callstack 0
  1502  0007CC                     _EUSART2_SetErrorHandler:
  1503                           	callstack 28
  1504  0007CC                     
  1505                           ;mcc_generated_files/eusart2.c: 166:     EUSART2_ErrorHandler = interruptHandler;
  1506  0007CC  C001  F01C         	movff	EUSART2_SetErrorHandler@interruptHandler,_EUSART2_ErrorHandler
  1507  0007D0  C002  F01D         	movff	EUSART2_SetErrorHandler@interruptHandler+1,_EUSART2_ErrorHandler+1
  1508  0007D4  0012               	return		;funcret
  1509  0007D6                     __end_of_EUSART2_SetErrorHandler:
  1510                           	callstack 0
  1511                           
  1512 ;; *************** function _DRV8711_SPI_read *****************
  1513 ;; Defined at:
  1514 ;;		line 108 in file "step/step.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;  addr            1    wreg     unsigned char 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  addr            1    5[COMRAM] unsigned char 
  1519 ;;  addr4           1    6[COMRAM] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1
  1529 ;;      Params:         0       0       0
  1530 ;;      Locals:         2       0       0
  1531 ;;      Temps:          0       0       0
  1532 ;;      Totals:         2       0       0
  1533 ;;Total ram usage:        2 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    2
  1536 ;; This function calls:
  1537 ;;		_SPI1_ExchangeByte
  1538 ;;		_write1byteHex
  1539 ;;		_writeByte
  1540 ;;		_writeString
  1541 ;; This function is called by:
  1542 ;;		_main
  1543 ;;		_Step
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	text14
  1548  00059E                     __ptext14:
  1549                           	callstack 0
  1550  00059E                     _DRV8711_SPI_read:
  1551                           	callstack 28
  1552                           
  1553                           ;incstack = 0
  1554                           ;DRV8711_SPI_read@addr stored from wreg
  1555  00059E  6E06               	movwf	DRV8711_SPI_read@addr^0,c
  1556  0005A0                     
  1557                           ;step/step.c: 112:     uint8_t addr4 = (addr | 0b1000);
  1558  0005A0  5006               	movf	DRV8711_SPI_read@addr^0,w,c
  1559  0005A2  0908               	iorlw	8
  1560  0005A4  6E07               	movwf	DRV8711_SPI_read@addr4^0,c
  1561  0005A6  848B               	bsf	139,2,c	;volatile
  1562  0005A8                     
  1563                           ;step/step.c: 115:     control_bits_read_high = SPI1_ExchangeByte((addr4<<4) & 0b1111000
      +                          0);
  1564  0005A8  3807               	swapf	DRV8711_SPI_read@addr4^0,w,c
  1565  0005AA  0BF0               	andlw	240
  1566  0005AC  0BF0               	andlw	240
  1567  0005AE  ECA6  F003         	call	_SPI1_ExchangeByte
  1568  0005B2  6E23               	movwf	_control_bits_read_high^0,c
  1569  0005B4                     
  1570                           ;step/step.c: 116:     control_bits_read_low = SPI1_ExchangeByte(0);
  1571  0005B4  0E00               	movlw	0
  1572  0005B6  ECA6  F003         	call	_SPI1_ExchangeByte
  1573  0005BA  6E22               	movwf	_control_bits_read_low^0,c
  1574  0005BC  948B               	bcf	139,2,c	;volatile
  1575  0005BE                     
  1576                           ;step/step.c: 129:     writeString("w:");
  1577  0005BE  0E13               	movlw	low STR_2
  1578  0005C0  6E02               	movwf	writeString@message^0,c
  1579  0005C2  0E02               	movlw	high STR_2
  1580  0005C4  6E03               	movwf	(writeString@message+1)^0,c
  1581  0005C6  EC0C  F003         	call	_writeString	;wreg free
  1582  0005CA                     
  1583                           ;step/step.c: 130:     writeByte('\t');
  1584  0005CA  0E09               	movlw	9
  1585  0005CC  EC96  F003         	call	_writeByte
  1586  0005D0                     
  1587                           ;step/step.c: 131:     write1byteHex((addr4<<4) & 0b11110000);
  1588  0005D0  3807               	swapf	DRV8711_SPI_read@addr4^0,w,c
  1589  0005D2  0BF0               	andlw	240
  1590  0005D4  0BF0               	andlw	240
  1591  0005D6  EC99  F001         	call	_write1byteHex
  1592  0005DA                     
  1593                           ;step/step.c: 132:     writeByte('\t');
  1594  0005DA  0E09               	movlw	9
  1595  0005DC  EC96  F003         	call	_writeByte
  1596  0005E0                     
  1597                           ;step/step.c: 133:     write1byteHex(0);
  1598  0005E0  0E00               	movlw	0
  1599  0005E2  EC99  F001         	call	_write1byteHex
  1600  0005E6                     
  1601                           ;step/step.c: 134:     writeByte('\t');
  1602  0005E6  0E09               	movlw	9
  1603  0005E8  EC96  F003         	call	_writeByte
  1604  0005EC                     
  1605                           ;step/step.c: 135:     writeString("r:");
  1606  0005EC  0E10               	movlw	low STR_5
  1607  0005EE  6E02               	movwf	writeString@message^0,c
  1608  0005F0  0E02               	movlw	high STR_5
  1609  0005F2  6E03               	movwf	(writeString@message+1)^0,c
  1610  0005F4  EC0C  F003         	call	_writeString	;wreg free
  1611  0005F8                     
  1612                           ;step/step.c: 136:     writeByte('\t');
  1613  0005F8  0E09               	movlw	9
  1614  0005FA  EC96  F003         	call	_writeByte
  1615  0005FE                     
  1616                           ;step/step.c: 137:     write1byteHex(control_bits_read_high);
  1617  0005FE  5023               	movf	_control_bits_read_high^0,w,c
  1618  000600  EC99  F001         	call	_write1byteHex
  1619  000604                     
  1620                           ;step/step.c: 138:     writeByte('\t');
  1621  000604  0E09               	movlw	9
  1622  000606  EC96  F003         	call	_writeByte
  1623  00060A                     
  1624                           ;step/step.c: 139:     write1byteHex(control_bits_read_high);
  1625  00060A  5023               	movf	_control_bits_read_high^0,w,c
  1626  00060C  EC99  F001         	call	_write1byteHex
  1627  000610                     
  1628                           ;step/step.c: 140:     writeByte('\n');
  1629  000610  0E0A               	movlw	10
  1630  000612  EC96  F003         	call	_writeByte
  1631  000616  0012               	return		;funcret
  1632  000618                     __end_of_DRV8711_SPI_read:
  1633                           	callstack 0
  1634                           
  1635 ;; *************** function _writeString *****************
  1636 ;; Defined at:
  1637 ;;		line 104 in file "EUSART_Helpers/EUSART_Helpers.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  message         2    1[COMRAM] PTR unsigned char 
  1640 ;;		 -> STR_5(3), STR_4(3), STR_3(5), STR_2(3), 
  1641 ;;		 -> STR_1(6), 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  charIn          2    3[COMRAM] PTR unsigned char 
  1644 ;;		 -> STR_5(3), STR_4(3), STR_3(5), STR_2(3), 
  1645 ;;		 -> STR_1(6), 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      void 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1
  1655 ;;      Params:         2       0       0
  1656 ;;      Locals:         2       0       0
  1657 ;;      Temps:          0       0       0
  1658 ;;      Totals:         4       0       0
  1659 ;;Total ram usage:        4 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    1
  1662 ;; This function calls:
  1663 ;;		Absolute function
  1664 ;;		_EUSART2_Write
  1665 ;; This function is called by:
  1666 ;;		_main
  1667 ;;		_DRV8711_SPI_CMD
  1668 ;;		_DRV8711_SPI_read
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text15
  1673  000618                     __ptext15:
  1674                           	callstack 0
  1675  000618                     _writeString:
  1676                           	callstack 29
  1677  000618                     
  1678                           ;EUSART_Helpers/EUSART_Helpers.c: 110:     char *charIn;;EUSART_Helpers/EUSART_Helpers.c
      +                          : 111:     charIn = &message[0];
  1679  000618  C002  F004         	movff	writeString@message,writeString@charIn
  1680  00061C  C003  F005         	movff	writeString@message+1,writeString@charIn+1
  1681                           
  1682                           ;EUSART_Helpers/EUSART_Helpers.c: 112:     while(*charIn != '\0'){
  1683  000620  EF27  F003         	goto	l1615
  1684  000624                     l1611:
  1685                           
  1686                           ;EUSART_Helpers/EUSART_Helpers.c: 115:         uart_write(*charIn);
  1687  000624  D802               	call	u888
  1688  000626  EF25  F003         	goto	u889
  1689  00062A                     u888:
  1690  00062A  0005               	push	
  1691  00062C  6EFA               	movwf	pclath,c
  1692  00062E  501A               	movf	_uart_write^0,w,c
  1693  000630  6EFD               	movwf	tosl,c
  1694  000632  501B               	movf	(_uart_write+1)^0,w,c
  1695  000634  6EFE               	movwf	tosh,c
  1696  000636  50F8               	movf	tblptru,w,c
  1697  000638  6EFF               	movwf	tosu,c
  1698  00063A  50FA               	movf	pclath,w,c
  1699  00063C  C004  FFF6         	movff	writeString@charIn,tblptrl
  1700  000640  C005  FFF7         	movff	writeString@charIn+1,tblptrh
  1701  000644                     	if	0	;tblptru may be non-zero
  1702  000644                     	endif
  1703  000644                     	if	0	;tblptru may be non-zero
  1704  000644                     	endif
  1705  000644  0008               	tblrd		*
  1706  000646  50F5               	movf	tablat,w,c
  1707  000648  0012               	return		;indir
  1708  00064A                     u889:
  1709  00064A                     
  1710                           ;EUSART_Helpers/EUSART_Helpers.c: 116:         charIn++;
  1711  00064A  4A04               	infsnz	writeString@charIn^0,f,c
  1712  00064C  2A05               	incf	(writeString@charIn+1)^0,f,c
  1713  00064E                     l1615:
  1714                           
  1715                           ;EUSART_Helpers/EUSART_Helpers.c: 112:     while(*charIn != '\0'){
  1716  00064E  C004  FFF6         	movff	writeString@charIn,tblptrl
  1717  000652  C005  FFF7         	movff	writeString@charIn+1,tblptrh
  1718  000656                     	if	0	;tblptru may be non-zero
  1719  000656                     	endif
  1720  000656                     	if	0	;tblptru may be non-zero
  1721  000656                     	endif
  1722  000656  0008               	tblrd		*
  1723  000658  50F5               	movf	tablat,w,c
  1724  00065A  0900               	iorlw	0
  1725  00065C  A4D8               	btfss	status,2,c
  1726  00065E  EF33  F003         	goto	u891
  1727  000662  EF35  F003         	goto	u890
  1728  000666                     u891:
  1729  000666  EF12  F003         	goto	l1611
  1730  00066A                     u890:
  1731  00066A  0012               	return		;funcret
  1732  00066C                     __end_of_writeString:
  1733                           	callstack 0
  1734                           
  1735 ;; *************** function _writeByte *****************
  1736 ;; Defined at:
  1737 ;;		line 15 in file "EUSART_Helpers/EUSART_Helpers.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  in              1    wreg     unsigned char 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  in              1    1[COMRAM] unsigned char 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2, pclath, tosl, cstack
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1
  1751 ;;      Params:         0       0       0
  1752 ;;      Locals:         1       0       0
  1753 ;;      Temps:          0       0       0
  1754 ;;      Totals:         1       0       0
  1755 ;;Total ram usage:        1 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    1
  1758 ;; This function calls:
  1759 ;;		Absolute function
  1760 ;;		_EUSART2_Write
  1761 ;; This function is called by:
  1762 ;;		_DRV8711_SPI_CMD
  1763 ;;		_DRV8711_SPI_read
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text16
  1768  00072C                     __ptext16:
  1769                           	callstack 0
  1770  00072C                     _writeByte:
  1771                           	callstack 27
  1772                           
  1773                           ;incstack = 0
  1774                           ;writeByte@in stored from wreg
  1775  00072C  6E02               	movwf	writeByte@in^0,c
  1776  00072E                     
  1777                           ;EUSART_Helpers/EUSART_Helpers.c: 16:     uart_write(in);
  1778  00072E  D802               	call	u48
  1779  000730  EFA5  F003         	goto	u49
  1780  000734                     u48:
  1781  000734  0005               	push	
  1782  000736  6EFA               	movwf	pclath,c
  1783  000738  501A               	movf	_uart_write^0,w,c
  1784  00073A  6EFD               	movwf	tosl,c
  1785  00073C  501B               	movf	(_uart_write+1)^0,w,c
  1786  00073E  6EFE               	movwf	tosh,c
  1787  000740  50F8               	movf	tblptru,w,c
  1788  000742  6EFF               	movwf	tosu,c
  1789  000744  50FA               	movf	pclath,w,c
  1790  000746  5002               	movf	writeByte@in^0,w,c
  1791  000748  0012               	return		;indir
  1792  00074A                     u49:
  1793  00074A  0012               	return		;funcret
  1794  00074C                     __end_of_writeByte:
  1795                           	callstack 0
  1796                           
  1797 ;; *************** function _write1byteHex *****************
  1798 ;; Defined at:
  1799 ;;		line 19 in file "EUSART_Helpers/EUSART_Helpers.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  in              1    wreg     unsigned char 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;  in              1    2[COMRAM] unsigned char 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1
  1813 ;;      Params:         0       0       0
  1814 ;;      Locals:         1       0       0
  1815 ;;      Temps:          1       0       0
  1816 ;;      Totals:         2       0       0
  1817 ;;Total ram usage:        2 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    1
  1820 ;; This function calls:
  1821 ;;		Absolute function
  1822 ;;		_EUSART2_Write
  1823 ;; This function is called by:
  1824 ;;		_DRV8711_SPI_CMD
  1825 ;;		_DRV8711_SPI_read
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text17
  1830  000332                     __ptext17:
  1831                           	callstack 0
  1832  000332                     _write1byteHex:
  1833                           	callstack 27
  1834                           
  1835                           ;incstack = 0
  1836                           ;write1byteHex@in stored from wreg
  1837  000332  6E03               	movwf	write1byteHex@in^0,c
  1838  000334                     
  1839                           ;EUSART_Helpers/EUSART_Helpers.c: 20:     uart_write('0');
  1840  000334  D802               	call	u58
  1841  000336  EFA8  F001         	goto	u59
  1842  00033A                     u58:
  1843  00033A  0005               	push	
  1844  00033C  6EFA               	movwf	pclath,c
  1845  00033E  501A               	movf	_uart_write^0,w,c
  1846  000340  6EFD               	movwf	tosl,c
  1847  000342  501B               	movf	(_uart_write+1)^0,w,c
  1848  000344  6EFE               	movwf	tosh,c
  1849  000346  50F8               	movf	tblptru,w,c
  1850  000348  6EFF               	movwf	tosu,c
  1851  00034A  50FA               	movf	pclath,w,c
  1852  00034C  0E30               	movlw	48
  1853  00034E  0012               	return		;indir
  1854  000350                     u59:
  1855                           
  1856                           ;EUSART_Helpers/EUSART_Helpers.c: 21:     uart_write('x');
  1857  000350  D802               	call	u68
  1858  000352  EFB6  F001         	goto	u69
  1859  000356                     u68:
  1860  000356  0005               	push	
  1861  000358  6EFA               	movwf	pclath,c
  1862  00035A  501A               	movf	_uart_write^0,w,c
  1863  00035C  6EFD               	movwf	tosl,c
  1864  00035E  501B               	movf	(_uart_write+1)^0,w,c
  1865  000360  6EFE               	movwf	tosh,c
  1866  000362  50F8               	movf	tblptru,w,c
  1867  000364  6EFF               	movwf	tosu,c
  1868  000366  50FA               	movf	pclath,w,c
  1869  000368  0E78               	movlw	120
  1870  00036A  0012               	return		;indir
  1871  00036C                     u69:
  1872  00036C                     
  1873                           ;EUSART_Helpers/EUSART_Helpers.c: 22:     if(((in>>4) & 0xF) > 9){
  1874  00036C  C003  F002         	movff	write1byteHex@in,??_write1byteHex
  1875  000370  3A02               	swapf	??_write1byteHex^0,f,c
  1876  000372  0E0F               	movlw	15
  1877  000374  1602               	andwf	??_write1byteHex^0,f,c
  1878  000376  0E0F               	movlw	15
  1879  000378  1602               	andwf	??_write1byteHex^0,f,c
  1880  00037A  0E09               	movlw	9
  1881  00037C  6402               	cpfsgt	??_write1byteHex^0,c
  1882  00037E  EFC3  F001         	goto	u71
  1883  000382  EFC5  F001         	goto	u70
  1884  000386                     u71:
  1885  000386  EFD8  F001         	goto	l1137
  1886  00038A                     u70:
  1887  00038A                     
  1888                           ;EUSART_Helpers/EUSART_Helpers.c: 23:         uart_write(((in>>4) & 0xF) + 0x37);
  1889  00038A  D802               	call	u88
  1890  00038C  EFD6  F001         	goto	u89
  1891  000390                     u88:
  1892  000390  0005               	push	
  1893  000392  6EFA               	movwf	pclath,c
  1894  000394  501A               	movf	_uart_write^0,w,c
  1895  000396  6EFD               	movwf	tosl,c
  1896  000398  501B               	movf	(_uart_write+1)^0,w,c
  1897  00039A  6EFE               	movwf	tosh,c
  1898  00039C  50F8               	movf	tblptru,w,c
  1899  00039E  6EFF               	movwf	tosu,c
  1900  0003A0  50FA               	movf	pclath,w,c
  1901  0003A2  3803               	swapf	write1byteHex@in^0,w,c
  1902  0003A4  0B0F               	andlw	15
  1903  0003A6  0B0F               	andlw	15
  1904  0003A8  0F37               	addlw	55
  1905  0003AA  0012               	return		;indir
  1906  0003AC                     u89:
  1907                           
  1908                           ;EUSART_Helpers/EUSART_Helpers.c: 24:     }else{
  1909  0003AC  EFE9  F001         	goto	l1139
  1910  0003B0                     l1137:
  1911                           
  1912                           ;EUSART_Helpers/EUSART_Helpers.c: 25:         uart_write(((in>>4) & 0xF) + 0x30);
  1913  0003B0  D802               	call	u98
  1914  0003B2  EFE9  F001         	goto	u99
  1915  0003B6                     u98:
  1916  0003B6  0005               	push	
  1917  0003B8  6EFA               	movwf	pclath,c
  1918  0003BA  501A               	movf	_uart_write^0,w,c
  1919  0003BC  6EFD               	movwf	tosl,c
  1920  0003BE  501B               	movf	(_uart_write+1)^0,w,c
  1921  0003C0  6EFE               	movwf	tosh,c
  1922  0003C2  50F8               	movf	tblptru,w,c
  1923  0003C4  6EFF               	movwf	tosu,c
  1924  0003C6  50FA               	movf	pclath,w,c
  1925  0003C8  3803               	swapf	write1byteHex@in^0,w,c
  1926  0003CA  0B0F               	andlw	15
  1927  0003CC  0B0F               	andlw	15
  1928  0003CE  0F30               	addlw	48
  1929  0003D0  0012               	return		;indir
  1930  0003D2                     u99:
  1931  0003D2                     l1139:
  1932                           
  1933                           ;EUSART_Helpers/EUSART_Helpers.c: 27:     if((in & 0x0F) > 9){
  1934  0003D2  C003  F002         	movff	write1byteHex@in,??_write1byteHex
  1935  0003D6  0E0F               	movlw	15
  1936  0003D8  1602               	andwf	??_write1byteHex^0,f,c
  1937  0003DA  0E09               	movlw	9
  1938  0003DC  6402               	cpfsgt	??_write1byteHex^0,c
  1939  0003DE  EFF3  F001         	goto	u101
  1940  0003E2  EFF5  F001         	goto	u100
  1941  0003E6                     u101:
  1942  0003E6  EF07  F002         	goto	l1143
  1943  0003EA                     u100:
  1944  0003EA                     
  1945                           ;EUSART_Helpers/EUSART_Helpers.c: 28:         uart_write((in & 0x0F) + 0x37);
  1946  0003EA  D802               	call	u118
  1947  0003EC  EF05  F002         	goto	u119
  1948  0003F0                     u118:
  1949  0003F0  0005               	push	
  1950  0003F2  6EFA               	movwf	pclath,c
  1951  0003F4  501A               	movf	_uart_write^0,w,c
  1952  0003F6  6EFD               	movwf	tosl,c
  1953  0003F8  501B               	movf	(_uart_write+1)^0,w,c
  1954  0003FA  6EFE               	movwf	tosh,c
  1955  0003FC  50F8               	movf	tblptru,w,c
  1956  0003FE  6EFF               	movwf	tosu,c
  1957  000400  50FA               	movf	pclath,w,c
  1958  000402  5003               	movf	write1byteHex@in^0,w,c
  1959  000404  0B0F               	andlw	15
  1960  000406  0F37               	addlw	55
  1961  000408  0012               	return		;indir
  1962  00040A                     u119:
  1963                           
  1964                           ;EUSART_Helpers/EUSART_Helpers.c: 29:     }else{
  1965  00040A  EF17  F002         	goto	l248
  1966  00040E                     l1143:
  1967                           
  1968                           ;EUSART_Helpers/EUSART_Helpers.c: 30:         uart_write((in & 0x0F) + 0x30);
  1969  00040E  D802               	call	u128
  1970  000410  EF17  F002         	goto	u129
  1971  000414                     u128:
  1972  000414  0005               	push	
  1973  000416  6EFA               	movwf	pclath,c
  1974  000418  501A               	movf	_uart_write^0,w,c
  1975  00041A  6EFD               	movwf	tosl,c
  1976  00041C  501B               	movf	(_uart_write+1)^0,w,c
  1977  00041E  6EFE               	movwf	tosh,c
  1978  000420  50F8               	movf	tblptru,w,c
  1979  000422  6EFF               	movwf	tosu,c
  1980  000424  50FA               	movf	pclath,w,c
  1981  000426  5003               	movf	write1byteHex@in^0,w,c
  1982  000428  0B0F               	andlw	15
  1983  00042A  0F30               	addlw	48
  1984  00042C  0012               	return		;indir
  1985  00042E                     u129:
  1986  00042E                     l248:
  1987  00042E  0012               	return		;funcret
  1988  000430                     __end_of_write1byteHex:
  1989                           	callstack 0
  1990                           
  1991 ;; *************** function _EUSART2_Write *****************
  1992 ;; Defined at:
  1993 ;;		line 132 in file "mcc_generated_files/eusart2.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  txData          1    wreg     unsigned char 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  txData          1    0[COMRAM] unsigned char 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1
  2007 ;;      Params:         0       0       0
  2008 ;;      Locals:         1       0       0
  2009 ;;      Temps:          0       0       0
  2010 ;;      Totals:         1       0       0
  2011 ;;Total ram usage:        1 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;;		_writeString
  2018 ;;		_writeByte
  2019 ;;		_write1byteHex
  2020 ;;		_write2bytesHex
  2021 ;;		_write4bytesHex
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text18
  2026  000766                     __ptext18:
  2027                           	callstack 0
  2028  000766                     _EUSART2_Write:
  2029                           	callstack 29
  2030                           
  2031                           ;incstack = 0
  2032                           ;EUSART2_Write@txData stored from wreg
  2033  000766  6E01               	movwf	EUSART2_Write@txData^0,c
  2034  000768                     l131:
  2035                           
  2036                           ;mcc_generated_files/eusart2.c: 134:     while(0 == PIR3bits.TX2IF)
  2037  000768  A8A4               	btfss	164,4,c	;volatile
  2038  00076A  EFB9  F003         	goto	u11
  2039  00076E  EFBB  F003         	goto	u10
  2040  000772                     u11:
  2041  000772  EFB4  F003         	goto	l131
  2042  000776                     u10:
  2043  000776                     
  2044                           ;mcc_generated_files/eusart2.c: 138:     TXREG2 = txData;
  2045  000776  C001  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  2046  00077A  0012               	return		;funcret
  2047  00077C                     __end_of_EUSART2_Write:
  2048                           	callstack 0
  2049                           
  2050 ;; *************** function _SPI1_ExchangeByte *****************
  2051 ;; Defined at:
  2052 ;;		line 92 in file "mcc_generated_files/spi1.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  data            1    wreg     unsigned char 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  data            1    0[COMRAM] unsigned char 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      unsigned char 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1
  2066 ;;      Params:         0       0       0
  2067 ;;      Locals:         1       0       0
  2068 ;;      Temps:          0       0       0
  2069 ;;      Totals:         1       0       0
  2070 ;;Total ram usage:        1 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; This function calls:
  2073 ;;		Nothing
  2074 ;; This function is called by:
  2075 ;;		_DRV8711_SPI_read
  2076 ;;		_SPI1_WriteBlock
  2077 ;;		_SPI1_ReadBlock
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text19
  2082  00074C                     __ptext19:
  2083                           	callstack 0
  2084  00074C                     _SPI1_ExchangeByte:
  2085                           	callstack 29
  2086                           
  2087                           ;incstack = 0
  2088                           ;SPI1_ExchangeByte@data stored from wreg
  2089  00074C  6E01               	movwf	SPI1_ExchangeByte@data^0,c
  2090  00074E                     
  2091                           ;mcc_generated_files/spi1.c: 92: uint8_t SPI1_ExchangeByte(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 93: {;mcc_generated_files/spi1.c: 94:     SSP1BUF = data;
  2092  00074E  C001  FFC9         	movff	SPI1_ExchangeByte@data,4041	;volatile
  2093  000752                     l183:
  2094  000752  A69E               	btfss	158,3,c	;volatile
  2095  000754  EFAE  F003         	goto	u131
  2096  000758  EFB0  F003         	goto	u130
  2097  00075C                     u131:
  2098  00075C  EFA9  F003         	goto	l183
  2099  000760                     u130:
  2100  000760                     
  2101                           ;mcc_generated_files/spi1.c: 96:     PIR1bits.SSP1IF = 0;
  2102  000760  969E               	bcf	158,3,c	;volatile
  2103                           
  2104                           ;mcc_generated_files/spi1.c: 97:     return SSP1BUF;
  2105  000762  50C9               	movf	201,w,c	;volatile
  2106  000764  0012               	return		;funcret
  2107  000766                     __end_of_SPI1_ExchangeByte:
  2108                           	callstack 0
  2109                           
  2110                           	psect	text20
  2111  000000                     __ptext20:
  2112                           	callstack 0
  2113  000000                     
  2114                           	psect	rparam
  2115  0000                     
  2116                           	psect	idloc
  2117                           
  2118                           ;Config register IDLOC0 @ 0x200000
  2119                           ;	unspecified, using default values
  2120  200000                     	org	2097152
  2121  200000  FF                 	db	255
  2122                           
  2123                           ;Config register IDLOC1 @ 0x200001
  2124                           ;	unspecified, using default values
  2125  200001                     	org	2097153
  2126  200001  FF                 	db	255
  2127                           
  2128                           ;Config register IDLOC2 @ 0x200002
  2129                           ;	unspecified, using default values
  2130  200002                     	org	2097154
  2131  200002  FF                 	db	255
  2132                           
  2133                           ;Config register IDLOC3 @ 0x200003
  2134                           ;	unspecified, using default values
  2135  200003                     	org	2097155
  2136  200003  FF                 	db	255
  2137                           
  2138                           ;Config register IDLOC4 @ 0x200004
  2139                           ;	unspecified, using default values
  2140  200004                     	org	2097156
  2141  200004  FF                 	db	255
  2142                           
  2143                           ;Config register IDLOC5 @ 0x200005
  2144                           ;	unspecified, using default values
  2145  200005                     	org	2097157
  2146  200005  FF                 	db	255
  2147                           
  2148                           ;Config register IDLOC6 @ 0x200006
  2149                           ;	unspecified, using default values
  2150  200006                     	org	2097158
  2151  200006  FF                 	db	255
  2152                           
  2153                           ;Config register IDLOC7 @ 0x200007
  2154                           ;	unspecified, using default values
  2155  200007                     	org	2097159
  2156  200007  FF                 	db	255
  2157                           
  2158                           	psect	config
  2159                           
  2160                           ; Padding undefined space
  2161  300000                     	org	3145728
  2162  300000  FF                 	db	255
  2163                           
  2164                           ;Config register CONFIG1H @ 0x300001
  2165                           ;	Oscillator Selection bits
  2166                           ;	FOSC = INTIO67, Internal oscillator block
  2167                           ;	4X PLL Enable
  2168                           ;	PLLCFG = OFF, Oscillator used directly
  2169                           ;	Primary clock enable bit
  2170                           ;	PRICLKEN = ON, Primary clock enabled
  2171                           ;	Fail-Safe Clock Monitor Enable bit
  2172                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2173                           ;	Internal/External Oscillator Switchover bit
  2174                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2175  300001                     	org	3145729
  2176  300001  28                 	db	40
  2177                           
  2178                           ;Config register CONFIG2L @ 0x300002
  2179                           ;	Power-up Timer Enable bit
  2180                           ;	PWRTEN = OFF, Power up timer disabled
  2181                           ;	Brown-out Reset Enable bits
  2182                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2183                           ;	Brown Out Reset Voltage bits
  2184                           ;	BORV = 190, VBOR set to 1.90 V nominal
  2185  300002                     	org	3145730
  2186  300002  1F                 	db	31
  2187                           
  2188                           ;Config register CONFIG2H @ 0x300003
  2189                           ;	Watchdog Timer Enable bits
  2190                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  2191                           ;	Watchdog Timer Postscale Select bits
  2192                           ;	WDTPS = 32768, 1:32768
  2193  300003                     	org	3145731
  2194  300003  3C                 	db	60
  2195                           
  2196                           ; Padding undefined space
  2197  300004                     	org	3145732
  2198  300004  FF                 	db	255
  2199                           
  2200                           ;Config register CONFIG3H @ 0x300005
  2201                           ;	CCP2 MUX bit
  2202                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  2203                           ;	PORTB A/D Enable bit
  2204                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  2205                           ;	P3A/CCP3 Mux bit
  2206                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  2207                           ;	HFINTOSC Fast Start-up
  2208                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  2209                           ;	Timer3 Clock input mux bit
  2210                           ;	T3CMX = PORTC0, T3CKI is on RC0
  2211                           ;	ECCP2 B output mux bit
  2212                           ;	P2BMX = PORTB5, P2B is on RB5
  2213                           ;	MCLR Pin Enable bit
  2214                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  2215  300005                     	org	3145733
  2216  300005  BF                 	db	191
  2217                           
  2218                           ;Config register CONFIG4L @ 0x300006
  2219                           ;	Stack Full/Underflow Reset Enable bit
  2220                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2221                           ;	Single-Supply ICSP Enable bit
  2222                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  2223                           ;	Extended Instruction Set Enable bit
  2224                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2225                           ;	Background Debug
  2226                           ;	DEBUG = OFF, Disabled
  2227  300006                     	org	3145734
  2228  300006  85                 	db	133
  2229                           
  2230                           ; Padding undefined space
  2231  300007                     	org	3145735
  2232  300007  FF                 	db	255
  2233                           
  2234                           ;Config register CONFIG5L @ 0x300008
  2235                           ;	Code Protection Block 0
  2236                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  2237                           ;	Code Protection Block 1
  2238                           ;	CP1 = OFF, Block 1 (001000-001FFFh) not code-protected
  2239  300008                     	org	3145736
  2240  300008  03                 	db	3
  2241                           
  2242                           ;Config register CONFIG5H @ 0x300009
  2243                           ;	Boot Block Code Protection bit
  2244                           ;	CPB = OFF, Boot block (000000-0001FFh) not code-protected
  2245                           ;	Data EEPROM Code Protection bit
  2246                           ;	CPD = OFF, Data EEPROM not code-protected
  2247  300009                     	org	3145737
  2248  300009  C0                 	db	192
  2249                           
  2250                           ;Config register CONFIG6L @ 0x30000A
  2251                           ;	Write Protection Block 0
  2252                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  2253                           ;	Write Protection Block 1
  2254                           ;	WRT1 = OFF, Block 1 (001000-001FFFh) not write-protected
  2255  30000A                     	org	3145738
  2256  30000A  03                 	db	3
  2257                           
  2258                           ;Config register CONFIG6H @ 0x30000B
  2259                           ;	Configuration Register Write Protection bit
  2260                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2261                           ;	Boot Block Write Protection bit
  2262                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  2263                           ;	Data EEPROM Write Protection bit
  2264                           ;	WRTD = OFF, Data EEPROM not write-protected
  2265  30000B                     	org	3145739
  2266  30000B  E0                 	db	224
  2267                           
  2268                           ;Config register CONFIG7L @ 0x30000C
  2269                           ;	Table Read Protection Block 0
  2270                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  2271                           ;	Table Read Protection Block 1
  2272                           ;	EBTR1 = OFF, Block 1 (001000-001FFFh) not protected from table reads executed in other
      +                           blocks
  2273  30000C                     	org	3145740
  2274  30000C  03                 	db	3
  2275                           
  2276                           ;Config register CONFIG7H @ 0x30000D
  2277                           ;	Boot Block Table Read Protection bit
  2278                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  2279  30000D                     	org	3145741
  2280  30000D  40                 	db	64
  2281                           tosu	equ	0xFFF
  2282                           tosh	equ	0xFFE
  2283                           tosl	equ	0xFFD
  2284                           stkptr	equ	0xFFC
  2285                           pclatu	equ	0xFFB
  2286                           pclath	equ	0xFFA
  2287                           pcl	equ	0xFF9
  2288                           tblptru	equ	0xFF8
  2289                           tblptrh	equ	0xFF7
  2290                           tblptrl	equ	0xFF6
  2291                           tablat	equ	0xFF5
  2292                           prodh	equ	0xFF4
  2293                           prodl	equ	0xFF3
  2294                           indf0	equ	0xFEF
  2295                           postinc0	equ	0xFEE
  2296                           postdec0	equ	0xFED
  2297                           preinc0	equ	0xFEC
  2298                           plusw0	equ	0xFEB
  2299                           fsr0h	equ	0xFEA
  2300                           fsr0l	equ	0xFE9
  2301                           wreg	equ	0xFE8
  2302                           indf1	equ	0xFE7
  2303                           postinc1	equ	0xFE6
  2304                           postdec1	equ	0xFE5
  2305                           preinc1	equ	0xFE4
  2306                           plusw1	equ	0xFE3
  2307                           fsr1h	equ	0xFE2
  2308                           fsr1l	equ	0xFE1
  2309                           bsr	equ	0xFE0
  2310                           indf2	equ	0xFDF
  2311                           postinc2	equ	0xFDE
  2312                           postdec2	equ	0xFDD
  2313                           preinc2	equ	0xFDC
  2314                           plusw2	equ	0xFDB
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    4
    Data        2
    BSS         3
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     25      38
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    writeString@message	PTR unsigned char  size(2) Largest target is 6
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[5]), STR_2(CODE[3]), 
		 -> STR_1(CODE[6]), 

    writeString@charIn	PTR unsigned char  size(2) Largest target is 6
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[5]), STR_2(CODE[3]), 
		 -> STR_1(CODE[6]), 

    setUartFunction@uart_write_local_function	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Write(), 

    uart_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), EUSART2_Write(), 

    EUSART2_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_DefaultErrorHandler(), 

    EUSART2_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART2_DefaultErrorHandler(), 

    EUSART2_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_DefaultOverrunErrorHandler(), 

    EUSART2_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART2_DefaultOverrunErrorHandler(), 

    EUSART2_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_DefaultFramingErrorHandler(), 

    EUSART2_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART2_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMRAM

    _main->_setStepSize
    _stepperSleep->_DRV8711_SPI_CMD
    _setStepSize->_DRV8711_SPI_CMD
    _DRV8711_SPI_CMD->_writeString
    _EUSART2_Initialize->_EUSART2_SetErrorHandler
    _EUSART2_Initialize->_EUSART2_SetFramingErrorHandler
    _EUSART2_Initialize->_EUSART2_SetOverrunErrorHandler
    _DRV8711_SPI_read->_writeString
    _writeString->_EUSART2_Write
    _writeByte->_EUSART2_Write
    _write1byteHex->_EUSART2_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    5210
                                             21 COMRAM     4     4      0
                   _DRV8711_SPI_read
                  _SYSTEM_Initialize
                        _setStepSize
                    _setUartFunction
                       _stepperSleep
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _stepperSleep                                         1     1      0    1801
                                             13 COMRAM     1     1      0
                    _DRV8711_SPI_CMD
 ---------------------------------------------------------------------------------
 (1) _setUartFunction                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _setStepSize                                          8     8      0    1828
                                             13 COMRAM     8     8      0
                    _DRV8711_SPI_CMD
 ---------------------------------------------------------------------------------
 (2) _DRV8711_SPI_CMD                                      8     6      2    1779
                                              5 COMRAM     8     6      2
                     _SPI1_WriteByte
                      _write1byteHex
                          _writeByte
                        _writeString
 ---------------------------------------------------------------------------------
 (3) _SPI1_WriteByte                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     294
                 _EUSART2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     294
            _EUSART2_SetErrorHandler
     _EUSART2_SetFramingErrorHandler
     _EUSART2_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetOverrunErrorHandler                       2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetFramingErrorHandler                       2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetErrorHandler                              2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _DRV8711_SPI_read                                     2     2      0     680
                                              5 COMRAM     2     2      0
                  _SPI1_ExchangeByte
                      _write1byteHex
                          _writeByte
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          4     2      2     463
                                              1 COMRAM     4     2      2
                   Absolute function *
                      _EUSART2_Write *
 ---------------------------------------------------------------------------------
 (3) _writeByte                                            1     1      0      30
                                              1 COMRAM     1     1      0
                   Absolute function *
                      _EUSART2_Write *
 ---------------------------------------------------------------------------------
 (3) _write1byteHex                                        2     2      0     105
                                              1 COMRAM     2     2      0
                   Absolute function *
                      _EUSART2_Write *
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Write                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_ExchangeByte                                    1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DRV8711_SPI_read
     _SPI1_ExchangeByte
     _write1byteHex
       Absolute function(Fake) *
       _EUSART2_Write *
     _writeByte
       Absolute function(Fake) *
       _EUSART2_Write *
     _writeString
       Absolute function(Fake) *
       _EUSART2_Write *
   _SYSTEM_Initialize
     _EUSART2_Initialize
       _EUSART2_SetErrorHandler
       _EUSART2_SetFramingErrorHandler
       _EUSART2_SetOverrunErrorHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   _setStepSize
     _DRV8711_SPI_CMD
       _SPI1_WriteByte
       _write1byteHex
         Absolute function(Fake) *
         _EUSART2_Write *
       _writeByte
         Absolute function(Fake) *
         _EUSART2_Write *
       _writeString
         Absolute function(Fake) *
         _EUSART2_Write *
   _setUartFunction
   _stepperSleep
     _DRV8711_SPI_CMD
       _SPI1_WriteByte
       _write1byteHex
         Absolute function(Fake) *
         _EUSART2_Write *
       _writeByte
         Absolute function(Fake) *
         _EUSART2_Write *
       _writeString
         Absolute function(Fake) *
         _EUSART2_Write *
   _writeString
     Absolute function(Fake) *
     _EUSART2_Write *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     19      26       1       40.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      26       6        0.0%
DATA                 0      0      26       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Nov 12 12:01:15 2021

                            SPI1_WriteByte@byte 0001                               _SPI1_ExchangeByte 074C  
                                            l27 0702                                              l61 02EE  
                                            l58 02DA                                              u10 0776  
                                            u11 0772                                              u70 038A  
                                            u71 0386                                              u48 0734  
                                            u49 074A                                              u58 033A  
                                            u59 0350                                              u68 0356  
                                            u69 036C                                              u88 0390  
                                            u89 03AC                                              u98 03B6  
                                            u99 03D2                              ?_SPI1_ExchangeByte 0001  
                                           l210 07DC                                             l131 0768  
                                           l107 06A8                                             l134 077A  
                                           l230 078C                                             l152 07D4  
                                           l241 074A                                             l233 07AC  
                                           l146 07CA                                             l411 047C  
                                           l403 0436                                             l149 07C0  
                                           l173 079E                                             l413 0516  
                                           l405 0444                                             l406 0452  
                                           l238 07B6                                             l183 0752  
                                           l335 0616                                             l407 0460  
                                           l248 042E                                             l328 059C  
                                           l408 046E                                             l185 0760  
                                           l186 0764                                             l284 066A  
                                           l394 06D6                                             u100 03EA  
                                           u101 03E6                           __size_of_stepperSleep 002E  
                                           u130 0760                                             u131 075C  
                                           u118 03F0                                             u119 040A  
                                           u128 0414                                             u129 042E  
                                           u900 06BC                                             u901 06B8  
                                           u930 032A                                             u931 0326  
                                           u890 066A                                             u891 0666  
                                           u947 023A                                             u957 0256  
                                           u967 0272                                             u888 062A  
                                           u889 064A                                             u977 028E  
                                           u987 02AA                                             u997 02C6  
        __end_of_EUSART2_SetFramingErrorHandler 07CC         __size_of_EUSART2_SetFramingErrorHandler 000A  
                _EUSART2_SetFramingErrorHandler 07C2                             ??_SPI1_ExchangeByte 0001  
                                           tosl 000FFD                                             wreg 000FE8  
                                    _TXSTA2bits 000F72                                            l1111 0776  
                                          l1131 0334                                            l1109 0768  
                                          l1141 03EA                                            l1133 036C  
                                          l1143 040E                                            l1135 038A  
                                          l1127 07D8                                            l1137 03B0  
                                          l1129 072E                                            l1145 06D8  
                                          l1161 078E                                            l1139 03D2  
                                          l1147 06E4                                            l1163 079A  
                                          l1149 0700                                            l1165 079C  
                                          l1167 074E                                            l1169 07A0  
                                          l1611 0624                                            l1613 064A  
                                          l1701 05BE                                            l1621 07CC  
                                          l1615 064E                                            l1711 05E6  
                                          l1703 05CA                                            l1631 06A4  
                                          l1623 066C                                            l1609 0618  
                                          l1721 060A                                            l1713 05EC  
                                          l1705 05D0                                            l1617 07C2  
                                          l1625 0680                                            l1641 054C  
                                          l1633 051A                                            l1801 02EC  
                                          l1723 0610                                            l1715 05F8  
                                          l1707 05DA                                            l1619 07B8  
                                          l1627 068C                                            l1651 057E  
                                          l1643 054E                                            l1635 052C  
                                          l1731 06C4                                            l1803 02FE  
                                          l1717 05FE                                            l1709 05E0  
                                          l1629 0698                                            l1661 0788  
                                          l1653 0584                                            l1645 055A  
                                          l1637 052E                                            l1733 06C6  
                                          l1725 06AC                                            l1805 030A  
                                          l1719 0604                                            l1655 058A  
                                          l1647 0560                                            l1639 0546  
                                          l1671 0458                                            l1663 07AE  
                                          l1735 06C8                                            l1727 06BC  
                                          l1807 030E                                            l1657 0596  
                                          l1649 0578                                            l1673 0466  
                                          l1681 0482                                            l1665 0432  
                                          l1729 06BE                                            l1691 05A0  
                                          l1659 077C                                            l1675 0474  
                                          l1683 04CC                                            l1667 043C  
                                          l1771 0230                                            l1693 05A6  
                                          l1685 0508                                            l1669 044A  
                                          l1781 027E                                            l1773 0246  
                                          l1765 0218                                            l1695 05A8  
                                          l1791 02BC                                            l1783 0284  
                                          l1775 024C                                            l1767 0228  
                                          l1697 05B4                                            l1793 02D2  
                                          l1785 029A                                            l1777 0262  
                                          l1769 022A                                            l1699 05BC  
                                          l1883 0496                                            l1787 02A0  
                                          l1779 0268                                            l1789 02B6  
                                          l1799 02DC                                            STR_1 0205  
                                          STR_2 0213                                            STR_3 020B  
                                          STR_4 0213                                            STR_5 0210  
                                          u1007 02E2                                            u1017 02F4  
                                          _LATA 000F89                                            _LATB 000F8A  
                                          _LATC 000F8B                                            _WPUB 000F61  
                                 _EUSART2_Write 0766                                            _main 0218  
                                          start 0000                       __size_of_DRV8711_SPI_read 007A  
                     __end_of_SPI1_ExchangeByte 0766                                    ___param_bank 000000  
                                  _stepperSleep 06AA                  __size_of_OSCILLATOR_Initialize 000E  
                 __end_of_OSCILLATOR_Initialize 07AE                                           ?_main 0001  
                            writeString@message 0002                                           _TRISA 000F92  
                                         _TRISB 000F93                                           _TRISC 000F94  
                                   _writeString 0618                        __size_of_setUartFunction 000A  
                                         main@i 0018                                  ?_EUSART2_Write 0001  
                                         pclath 000FFA                                           tablat 000FF5  
                                stepperSleep@in 000E                                           status 000FD8  
                      __size_of_SPI1_Initialize 0012                         __size_of_SPI1_WriteByte 0008  
                               __initialization 0704                                    __end_of_main 0332  
                                        ??_main 0016                                   __activetblptr 000002  
                   _EUSART2_DefaultErrorHandler 000000                      __end_of_EUSART2_Initialize 06AA  
                                        _ANSELA 000F38                                          _ANSELB 000F39  
                                        _ANSELC 000F3A                                    ?_setStepSize 0001  
                                        _RCREG2 000F74                                          _RCSTA2 000F71  
                                        _OSCCON 000FD3                                          _SPBRG2 000F75  
                                        _TXREG2 000F73                                          _TXSTA2 000F72  
                    __size_of_SPI1_ExchangeByte 001A                          __size_of_write1byteHex 00FE  
                   _EUSART2_FramingErrorHandler 0020                                    __pdataCOMRAM 0025  
                                  __mediumconst 0000                        __size_of_DRV8711_SPI_CMD 0086  
                                        tblptrh 000FF7                                          tblptrl 000FF6  
                                        tblptru 000FF8                                 ??_EUSART2_Write 0001  
                             _SYSTEM_Initialize 077C                                      __accesstop 0060  
                       __end_of__initialization 0722                               ??_setUartFunction 0003  
                            ?_SYSTEM_Initialize 0001                           _control_bits_read_low 0022  
                                 ___rparam_used 000001                                _DRV8711_SPI_read 059E  
                                __pcstackCOMRAM 0001                             ??_SYSTEM_Initialize 0003  
                             ??_SPI1_Initialize 0001                           SPI1_ExchangeByte@data 0001  
                            _spi1_configuration 0201                        ?_EUSART2_SetErrorHandler 0001  
                                 _write1byteHex 0332                       __end_of_SYSTEM_Initialize 078E  
                           DRV8711_SPI_CMD@addr 000A                ??_EUSART2_SetFramingErrorHandler 0003  
               ?_EUSART2_SetFramingErrorHandler 0001                                      __pnvCOMRAM 001A  
                                _SPI1_WriteByte 07D6                                  ?_write1byteHex 0001  
                                  ?_writeString 0002                                 setStepSize@size 0014  
                                       _OSCCON2 000FD2                                         _OSCTUNE 000F9B  
                                       _SPBRGH2 000F76                                         _SSP1ADD 000FC8  
                                       _SSP1BUF 000FC9                               ??_DRV8711_SPI_CMD 0008  
                        __end_of_SPI1_WriteByte 07DE                            __size_of_setStepSize 00E8  
                            __size_of_writeByte 0020                                         __Hparam 0000  
                                       __Lparam 0000                                    __psmallconst 0200  
                                       __pcinit 0704                 __end_of_EUSART2_SetErrorHandler 07D6  
                                       __ramtop 0200                                         __ptext0 0218  
                                       __ptext1 06AA                                         __ptext2 07AE  
                                       __ptext3 0430                                         __ptext4 0518  
                                       __ptext5 07D6                                         __ptext6 077C  
                                       __ptext7 078E                                         __ptext8 06D8  
                                       __ptext9 07A0              _EUSART2_DefaultOverrunErrorHandler 000000  
                         _OSCILLATOR_Initialize 07A0                        ??_PIN_MANAGER_Initialize 0001  
                    __size_of_SYSTEM_Initialize 0012                            end_of_initialization 0722  
                               write1byteHex@in 0003                                 ?_SPI1_WriteByte 0001  
                                 __Lmediumconst 0000                              _EUSART2_Initialize 066C  
                           ?_EUSART2_Initialize 0001                                      _uart_write 001A  
                               ??_write1byteHex 0002                               __end_of_writeByte 074C  
                      __end_of_DRV8711_SPI_read 0618                                       _TRISCbits 000F94  
                               _setUartFunction 07AE                            ??_EUSART2_Initialize 0003  
                        _control_bits_read_high 0023                                 _SPI1_Initialize 078E  
                             writeString@charIn 0004                                   __pidataCOMRAM 07DE  
                                  _control_bits 0025                          ?_OSCILLATOR_Initialize 0001  
                           start_initialization 0704                 __size_of_PIN_MANAGER_Initialize 002C  
                          __size_of_writeString 0054                           __end_of_EUSART2_Write 077C  
              __size_of_EUSART2_SetErrorHandler 000A          __end_of_EUSART2_SetOverrunErrorHandler 07C2  
       __size_of_EUSART2_SetOverrunErrorHandler 000A                  _EUSART2_SetOverrunErrorHandler 07B8  
      setUartFunction@uart_write_local_function 0001                                   ?_stepperSleep 0001  
                       __end_of_setUartFunction 07B8                                 _DRV8711_SPI_CMD 0518  
                                   __pbssCOMRAM 0022                         __end_of_SPI1_Initialize 07A0  
                          DRV8711_SPI_CMD@cmd12 000C                            DRV8711_SPI_CMD@addr4 000B  
                           EUSART2_Write@txData 0001                              DRV8711_SPI_CMD@cmd 0006  
                        _PIN_MANAGER_Initialize 06D8                                  ??_stepperSleep 000E  
                                   __smallconst 0200                                        _BAUDCON2 000F70  
                              ??_SPI1_WriteByte 0001                                   ??_setStepSize 000E  
       EUSART2_SetErrorHandler@interruptHandler 0001                                        _LATBbits 000F8A  
                                      _LATCbits 000F8B                                        _PIR1bits 000F9E  
                                      _PIR3bits 000FA4                                        _SSP1CON1 000FC6  
                                      _SSP1CON2 000FC5                                     writeByte@in 0002  
                                      _SSP1STAT 000FC7                         __end_of_DRV8711_SPI_CMD 059E  
                              ?_setUartFunction 0001                               ?_DRV8711_SPI_read 0001  
                                     _writeByte 072C                                ?_SPI1_Initialize 0001  
                            ??_DRV8711_SPI_read 0006                                     _INTCON2bits 000FF1  
                       _EUSART2_SetErrorHandler 07CC                     _EUSART2_OverrunErrorHandler 001E  
                                      __Hrparam 0000                             __end_of_setStepSize 0518  
                                      __Lrparam 0000                         ??_OSCILLATOR_Initialize 0001  
                         __end_of_write1byteHex 0430                            _EUSART2_ErrorHandler 001C  
                          __end_of_stepperSleep 06D8                                        __ptext10 066C  
                                      __ptext11 07B8                                        __ptext20 0000  
                                      __ptext12 07C2                                        __ptext13 07CC  
                                      __ptext14 059E                                        __ptext15 0618  
                                      __ptext16 072C                                        __ptext17 0332  
                                      __ptext18 0766                                        __ptext19 074C  
                                    ?_writeByte 0001                                    _SSP1CON1bits 000FC6  
                   __size_of_EUSART2_Initialize 003E                                   __size_of_main 011A  
            _EUSART2_DefaultFramingErrorHandler 000000                           DRV8711_SPI_read@addr4 0007  
EUSART2_SetOverrunErrorHandler@interruptHandler 0001                                ?_DRV8711_SPI_CMD 0006  
              ??_EUSART2_SetOverrunErrorHandler 0003                 ?_EUSART2_SetOverrunErrorHandler 0001  
                                 ??_writeString 0004                                      _INTCONbits 000FF2  
                     ??_EUSART2_SetErrorHandler 0003                                     _setStepSize 0430  
                       ?_PIN_MANAGER_Initialize 0001                                      _RCSTA2bits 000F71  
                          DRV8711_SPI_read@addr 0006  EUSART2_SetFramingErrorHandler@interruptHandler 0001  
                        __size_of_EUSART2_Write 0016                                fp__EUSART2_Write 0000  
                                   ??_writeByte 0002                             __end_of_writeString 066C  
                __end_of_PIN_MANAGER_Initialize 0704                              _eusart2RxLastError 0024  
                    __end_of_spi1_configuration 0205                       setStepSize@step_size_bits 0015  
